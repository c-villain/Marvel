//
// PublicAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class PublicAPI {

    /**
     Fetches lists of events filtered by a character id.
     
     - parameter characterId: (path) The character ID. 
     - parameter name: (query) Filter the event list by name. (optional)
     - parameter nameStartsWith: (query) Return events with names that begin with the specified string (e.g. Sp). (optional)
     - parameter modifiedSince: (query) Return only events which have been modified since the specified date. (optional)
     - parameter creators: (query) Return only events which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only events which are part of the specified series (accepts a comma-separated list of ids). (optional)
     - parameter comics: (query) Return only events which take place in the specified comics (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only events which contain the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: EventDataWrapper
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func getCharacterEventsCollection(characterId: Int, name: String? = nil, nameStartsWith: String? = nil, modifiedSince: Date? = nil, creators: [Int]? = nil, series: [Int]? = nil, comics: [Int]? = nil, stories: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> EventDataWrapper {
        return try await withCheckedThrowingContinuation { continuation in
            getCharacterEventsCollectionWithRequestBuilder(characterId: characterId, name: name, nameStartsWith: nameStartsWith, modifiedSince: modifiedSince, creators: creators, series: series, comics: comics, stories: stories, orderBy: orderBy, limit: limit, offset: offset).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Fetches lists of events filtered by a character id.
     - GET /v1/public/characters/{characterId}/events
     - Fetches lists of events in which a specific character appears, with optional filters. See notes on individual parameters below.
     - API Key:
       - type: apiKey apiKey 
       - name: ApiKey
     - parameter characterId: (path) The character ID. 
     - parameter name: (query) Filter the event list by name. (optional)
     - parameter nameStartsWith: (query) Return events with names that begin with the specified string (e.g. Sp). (optional)
     - parameter modifiedSince: (query) Return only events which have been modified since the specified date. (optional)
     - parameter creators: (query) Return only events which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only events which are part of the specified series (accepts a comma-separated list of ids). (optional)
     - parameter comics: (query) Return only events which take place in the specified comics (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only events which contain the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - returns: RequestBuilder<EventDataWrapper> 
     */
    open class func getCharacterEventsCollectionWithRequestBuilder(characterId: Int, name: String? = nil, nameStartsWith: String? = nil, modifiedSince: Date? = nil, creators: [Int]? = nil, series: [Int]? = nil, comics: [Int]? = nil, stories: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<EventDataWrapper> {
        var localVariablePath = "/v1/public/characters/{characterId}/events"
        let characterIdPreEscape = "\(APIHelper.mapValueToPathItem(characterId))"
        let characterIdPostEscape = characterIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{characterId}", with: characterIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": name?.encodeToJSON(),
            "nameStartsWith": nameStartsWith?.encodeToJSON(),
            "modifiedSince": modifiedSince?.encodeToJSON(),
            "creators": creators?.encodeToJSON(),
            "series": series?.encodeToJSON(),
            "comics": comics?.encodeToJSON(),
            "stories": stories?.encodeToJSON(),
            "orderBy": orderBy?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EventDataWrapper>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Fetches a single character by id.
     
     - parameter characterId: (path) A single character id. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: CharacterDataWrapper
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func getCharacterIndividual(characterId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> CharacterDataWrapper {
        return try await withCheckedThrowingContinuation { continuation in
            getCharacterIndividualWithRequestBuilder(characterId: characterId).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Fetches a single character by id.
     - GET /v1/public/characters/{characterId}
     - This method fetches a single character resource.  It is the canonical URI for any character resource provided by the API.
     - API Key:
       - type: apiKey apiKey 
       - name: ApiKey
     - parameter characterId: (path) A single character id. 
     - returns: RequestBuilder<CharacterDataWrapper> 
     */
    open class func getCharacterIndividualWithRequestBuilder(characterId: Int) -> RequestBuilder<CharacterDataWrapper> {
        var localVariablePath = "/v1/public/characters/{characterId}"
        let characterIdPreEscape = "\(APIHelper.mapValueToPathItem(characterId))"
        let characterIdPostEscape = characterIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{characterId}", with: characterIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CharacterDataWrapper>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Fetches lists of series filtered by a character id.
     
     - parameter characterId: (path) The character ID 
     - parameter title: (query) Filter by series title. (optional)
     - parameter titleStartsWith: (query) Return series with titles that begin with the specified string (e.g. Sp). (optional)
     - parameter startYear: (query) Return only series matching the specified start year. (optional)
     - parameter modifiedSince: (query) Return only series which have been modified since the specified date. (optional)
     - parameter comics: (query) Return only series which contain the specified comics (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only series which contain the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only series which have comics that take place during the specified events (accepts a comma-separated list of ids). (optional)
     - parameter creators: (query) Return only series which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     - parameter seriesType: (query) Filter the series by publication frequency type. (optional)
     - parameter contains: (query) Return only series containing one or more comics with the specified format. (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: SeriesDataWrapper
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func getCharacterSeriesCollection(characterId: Int, title: String? = nil, titleStartsWith: String? = nil, startYear: Int? = nil, modifiedSince: Date? = nil, comics: [Int]? = nil, stories: [Int]? = nil, events: [Int]? = nil, creators: [Int]? = nil, seriesType: String? = nil, contains: [String]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> SeriesDataWrapper {
        return try await withCheckedThrowingContinuation { continuation in
            getCharacterSeriesCollectionWithRequestBuilder(characterId: characterId, title: title, titleStartsWith: titleStartsWith, startYear: startYear, modifiedSince: modifiedSince, comics: comics, stories: stories, events: events, creators: creators, seriesType: seriesType, contains: contains, orderBy: orderBy, limit: limit, offset: offset).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Fetches lists of series filtered by a character id.
     - GET /v1/public/characters/{characterId}/series
     - Fetches lists of comic series in which a specific character appears, with optional filters. See notes on individual parameters below.
     - API Key:
       - type: apiKey apiKey 
       - name: ApiKey
     - parameter characterId: (path) The character ID 
     - parameter title: (query) Filter by series title. (optional)
     - parameter titleStartsWith: (query) Return series with titles that begin with the specified string (e.g. Sp). (optional)
     - parameter startYear: (query) Return only series matching the specified start year. (optional)
     - parameter modifiedSince: (query) Return only series which have been modified since the specified date. (optional)
     - parameter comics: (query) Return only series which contain the specified comics (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only series which contain the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only series which have comics that take place during the specified events (accepts a comma-separated list of ids). (optional)
     - parameter creators: (query) Return only series which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     - parameter seriesType: (query) Filter the series by publication frequency type. (optional)
     - parameter contains: (query) Return only series containing one or more comics with the specified format. (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - returns: RequestBuilder<SeriesDataWrapper> 
     */
    open class func getCharacterSeriesCollectionWithRequestBuilder(characterId: Int, title: String? = nil, titleStartsWith: String? = nil, startYear: Int? = nil, modifiedSince: Date? = nil, comics: [Int]? = nil, stories: [Int]? = nil, events: [Int]? = nil, creators: [Int]? = nil, seriesType: String? = nil, contains: [String]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<SeriesDataWrapper> {
        var localVariablePath = "/v1/public/characters/{characterId}/series"
        let characterIdPreEscape = "\(APIHelper.mapValueToPathItem(characterId))"
        let characterIdPostEscape = characterIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{characterId}", with: characterIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "title": title?.encodeToJSON(),
            "titleStartsWith": titleStartsWith?.encodeToJSON(),
            "startYear": startYear?.encodeToJSON(),
            "modifiedSince": modifiedSince?.encodeToJSON(),
            "comics": comics?.encodeToJSON(),
            "stories": stories?.encodeToJSON(),
            "events": events?.encodeToJSON(),
            "creators": creators?.encodeToJSON(),
            "seriesType": seriesType?.encodeToJSON(),
            "contains": contains?.encodeToJSON(),
            "orderBy": orderBy?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SeriesDataWrapper>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Fetches lists of stories filtered by a character id.
     
     - parameter characterId: (path) The character ID. 
     - parameter modifiedSince: (query) Return only stories which have been modified since the specified date. (optional)
     - parameter comics: (query) Return only stories contained in the specified (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only stories contained the specified series (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only stories which take place during the specified events (accepts a comma-separated list of ids). (optional)
     - parameter creators: (query) Return only stories which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: StoryDataWrapper
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func getCharacterStoryCollection(characterId: Int, modifiedSince: Date? = nil, comics: [Int]? = nil, series: [Int]? = nil, events: [Int]? = nil, creators: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> StoryDataWrapper {
        return try await withCheckedThrowingContinuation { continuation in
            getCharacterStoryCollectionWithRequestBuilder(characterId: characterId, modifiedSince: modifiedSince, comics: comics, series: series, events: events, creators: creators, orderBy: orderBy, limit: limit, offset: offset).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Fetches lists of stories filtered by a character id.
     - GET /v1/public/characters/{characterId}/stories
     - Fetches lists of comic stories  featuring a specific character with optional filters. See notes on individual parameters below.
     - API Key:
       - type: apiKey apiKey 
       - name: ApiKey
     - parameter characterId: (path) The character ID. 
     - parameter modifiedSince: (query) Return only stories which have been modified since the specified date. (optional)
     - parameter comics: (query) Return only stories contained in the specified (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only stories contained the specified series (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only stories which take place during the specified events (accepts a comma-separated list of ids). (optional)
     - parameter creators: (query) Return only stories which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - returns: RequestBuilder<StoryDataWrapper> 
     */
    open class func getCharacterStoryCollectionWithRequestBuilder(characterId: Int, modifiedSince: Date? = nil, comics: [Int]? = nil, series: [Int]? = nil, events: [Int]? = nil, creators: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<StoryDataWrapper> {
        var localVariablePath = "/v1/public/characters/{characterId}/stories"
        let characterIdPreEscape = "\(APIHelper.mapValueToPathItem(characterId))"
        let characterIdPostEscape = characterIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{characterId}", with: characterIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "modifiedSince": modifiedSince?.encodeToJSON(),
            "comics": comics?.encodeToJSON(),
            "series": series?.encodeToJSON(),
            "events": events?.encodeToJSON(),
            "creators": creators?.encodeToJSON(),
            "orderBy": orderBy?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<StoryDataWrapper>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Fetches lists of characters.
     
     - parameter name: (query) Return only characters matching the specified full character name (e.g. Spider-Man). (optional)
     - parameter nameStartsWith: (query) Return characters with names that begin with the specified string (e.g. Sp). (optional)
     - parameter modifiedSince: (query) Return only characters which have been modified since the specified date. (optional)
     - parameter comics: (query) Return only characters which appear in the specified comics (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only characters which appear the specified series (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only characters which appear in the specified events (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only characters which appear the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: CharacterDataWrapper
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func getCharactersCollection(name: String? = nil, nameStartsWith: String? = nil, modifiedSince: Date? = nil, comics: [Int]? = nil, series: [Int]? = nil, events: [Int]? = nil, stories: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> CharacterDataWrapper {
        return try await withCheckedThrowingContinuation { continuation in
            getCharactersCollectionWithRequestBuilder(name: name, nameStartsWith: nameStartsWith, modifiedSince: modifiedSince, comics: comics, series: series, events: events, stories: stories, orderBy: orderBy, limit: limit, offset: offset).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Fetches lists of characters.
     - GET /v1/public/characters
     - Fetches lists of comic characters with optional filters. See notes on individual parameters below.
     - API Key:
       - type: apiKey apiKey 
       - name: ApiKey
     - parameter name: (query) Return only characters matching the specified full character name (e.g. Spider-Man). (optional)
     - parameter nameStartsWith: (query) Return characters with names that begin with the specified string (e.g. Sp). (optional)
     - parameter modifiedSince: (query) Return only characters which have been modified since the specified date. (optional)
     - parameter comics: (query) Return only characters which appear in the specified comics (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only characters which appear the specified series (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only characters which appear in the specified events (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only characters which appear the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - returns: RequestBuilder<CharacterDataWrapper> 
     */
    open class func getCharactersCollectionWithRequestBuilder(name: String? = nil, nameStartsWith: String? = nil, modifiedSince: Date? = nil, comics: [Int]? = nil, series: [Int]? = nil, events: [Int]? = nil, stories: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<CharacterDataWrapper> {
        let localVariablePath = "/v1/public/characters"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": name?.encodeToJSON(),
            "nameStartsWith": nameStartsWith?.encodeToJSON(),
            "modifiedSince": modifiedSince?.encodeToJSON(),
            "comics": comics?.encodeToJSON(),
            "series": series?.encodeToJSON(),
            "events": events?.encodeToJSON(),
            "stories": stories?.encodeToJSON(),
            "orderBy": orderBy?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CharacterDataWrapper>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Fetches lists of characters filtered by a comic id.
     
     - parameter comicId: (path) The comic id. 
     - parameter name: (query) Return only characters matching the specified full character name (e.g. Spider-Man). (optional)
     - parameter nameStartsWith: (query) Return characters with names that begin with the specified string (e.g. Sp). (optional)
     - parameter modifiedSince: (query) Return only characters which have been modified since the specified date. (optional)
     - parameter series: (query) Return only characters which appear the specified series (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only characters which appear comics that took place in the specified events (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only characters which appear the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: CharacterDataWrapper
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func getComicCharacterCollection(comicId: Int, name: String? = nil, nameStartsWith: String? = nil, modifiedSince: Date? = nil, series: [Int]? = nil, events: [Int]? = nil, stories: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> CharacterDataWrapper {
        return try await withCheckedThrowingContinuation { continuation in
            getComicCharacterCollectionWithRequestBuilder(comicId: comicId, name: name, nameStartsWith: nameStartsWith, modifiedSince: modifiedSince, series: series, events: events, stories: stories, orderBy: orderBy, limit: limit, offset: offset).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Fetches lists of characters filtered by a comic id.
     - GET /v1/public/comics/{comicId}/characters
     - Fetches lists of characters which appear in a specific comic with optional filters. See notes on individual parameters below.
     - API Key:
       - type: apiKey apiKey 
       - name: ApiKey
     - parameter comicId: (path) The comic id. 
     - parameter name: (query) Return only characters matching the specified full character name (e.g. Spider-Man). (optional)
     - parameter nameStartsWith: (query) Return characters with names that begin with the specified string (e.g. Sp). (optional)
     - parameter modifiedSince: (query) Return only characters which have been modified since the specified date. (optional)
     - parameter series: (query) Return only characters which appear the specified series (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only characters which appear comics that took place in the specified events (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only characters which appear the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - returns: RequestBuilder<CharacterDataWrapper> 
     */
    open class func getComicCharacterCollectionWithRequestBuilder(comicId: Int, name: String? = nil, nameStartsWith: String? = nil, modifiedSince: Date? = nil, series: [Int]? = nil, events: [Int]? = nil, stories: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<CharacterDataWrapper> {
        var localVariablePath = "/v1/public/comics/{comicId}/characters"
        let comicIdPreEscape = "\(APIHelper.mapValueToPathItem(comicId))"
        let comicIdPostEscape = comicIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{comicId}", with: comicIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": name?.encodeToJSON(),
            "nameStartsWith": nameStartsWith?.encodeToJSON(),
            "modifiedSince": modifiedSince?.encodeToJSON(),
            "series": series?.encodeToJSON(),
            "events": events?.encodeToJSON(),
            "stories": stories?.encodeToJSON(),
            "orderBy": orderBy?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CharacterDataWrapper>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Fetches a single comic by id.
     
     - parameter comicId: (path) A single comic. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: ComicDataWrapper
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func getComicIndividual(comicId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> ComicDataWrapper {
        return try await withCheckedThrowingContinuation { continuation in
            getComicIndividualWithRequestBuilder(comicId: comicId).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Fetches a single comic by id.
     - GET /v1/public/comics/{comicId}
     - This method fetches a single comic resource.  It is the canonical URI for any comic resource provided by the API.
     - API Key:
       - type: apiKey apiKey 
       - name: ApiKey
     - parameter comicId: (path) A single comic. 
     - returns: RequestBuilder<ComicDataWrapper> 
     */
    open class func getComicIndividualWithRequestBuilder(comicId: Int) -> RequestBuilder<ComicDataWrapper> {
        var localVariablePath = "/v1/public/comics/{comicId}"
        let comicIdPreEscape = "\(APIHelper.mapValueToPathItem(comicId))"
        let comicIdPostEscape = comicIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{comicId}", with: comicIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ComicDataWrapper>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Fetches lists of stories filtered by a comic id.
     
     - parameter comicId: (path) The comic ID. 
     - parameter modifiedSince: (query) Return only stories which have been modified since the specified date. (optional)
     - parameter series: (query) Return only stories contained the specified series (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only stories which take place during the specified events (accepts a comma-separated list of ids). (optional)
     - parameter creators: (query) Return only stories which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     - parameter characters: (query) Return only stories which feature the specified characters (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: StoryDataWrapper
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func getComicStoryCollection(comicId: Int, modifiedSince: Date? = nil, series: [Int]? = nil, events: [Int]? = nil, creators: [Int]? = nil, characters: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> StoryDataWrapper {
        return try await withCheckedThrowingContinuation { continuation in
            getComicStoryCollectionWithRequestBuilder(comicId: comicId, modifiedSince: modifiedSince, series: series, events: events, creators: creators, characters: characters, orderBy: orderBy, limit: limit, offset: offset).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Fetches lists of stories filtered by a comic id.
     - GET /v1/public/comics/{comicId}/stories
     - Fetches lists of comic stories in a specific comic issue, with optional filters. See notes on individual parameters below.
     - API Key:
       - type: apiKey apiKey 
       - name: ApiKey
     - parameter comicId: (path) The comic ID. 
     - parameter modifiedSince: (query) Return only stories which have been modified since the specified date. (optional)
     - parameter series: (query) Return only stories contained the specified series (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only stories which take place during the specified events (accepts a comma-separated list of ids). (optional)
     - parameter creators: (query) Return only stories which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     - parameter characters: (query) Return only stories which feature the specified characters (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources. (optional)
     - returns: RequestBuilder<StoryDataWrapper> 
     */
    open class func getComicStoryCollectionWithRequestBuilder(comicId: Int, modifiedSince: Date? = nil, series: [Int]? = nil, events: [Int]? = nil, creators: [Int]? = nil, characters: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<StoryDataWrapper> {
        var localVariablePath = "/v1/public/comics/{comicId}/stories"
        let comicIdPreEscape = "\(APIHelper.mapValueToPathItem(comicId))"
        let comicIdPostEscape = comicIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{comicId}", with: comicIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "modifiedSince": modifiedSince?.encodeToJSON(),
            "series": series?.encodeToJSON(),
            "events": events?.encodeToJSON(),
            "creators": creators?.encodeToJSON(),
            "characters": characters?.encodeToJSON(),
            "orderBy": orderBy?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<StoryDataWrapper>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Fetches lists of comics.
     
     - parameter format: (query) Filter by the issue format (e.g. comic, digital comic, hardcover). (optional)
     - parameter formatType: (query) Filter by the issue format type (comic or collection). (optional)
     - parameter noVariants: (query) Exclude variants (alternate covers, secondary printings, director&#39;s cuts, etc.) from the result set. (optional)
     - parameter dateDescriptor: (query) Return comics within a predefined date range. (optional)
     - parameter dateRange: (query) Return comics within a predefined date range.  Dates must be specified as date1,date2 (e.g. 2013-01-01,2013-01-02).  Dates are preferably formatted as YYYY-MM-DD but may be sent as any common date format. (optional)
     - parameter title: (query) Return only issues in series whose title matches the input. (optional)
     - parameter titleStartsWith: (query) Return only issues in series whose title starts with the input. (optional)
     - parameter startYear: (query) Return only issues in series whose start year matches the input. (optional)
     - parameter issueNumber: (query) Return only issues in series whose issue number matches the input. (optional)
     - parameter diamondCode: (query) Filter by diamond code. (optional)
     - parameter digitalId: (query) Filter by digital comic id. (optional)
     - parameter upc: (query) Filter by UPC. (optional)
     - parameter isbn: (query) Filter by ISBN. (optional)
     - parameter ean: (query) Filter by EAN. (optional)
     - parameter issn: (query) Filter by ISSN. (optional)
     - parameter hasDigitalIssue: (query) Include only results which are available digitally. (optional)
     - parameter modifiedSince: (query) Return only comics which have been modified since the specified date. (optional)
     - parameter creators: (query) Return only comics which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     - parameter characters: (query) Return only comics which feature the specified characters (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only comics which are part of the specified series (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only comics which take place in the specified events (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only comics which contain the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter sharedAppearances: (query) Return only comics in which the specified characters appear together (for example in which BOTH Spider-Man and Wolverine appear). Accepts a comma-separated list of ids. (optional)
     - parameter collaborators: (query) Return only comics in which the specified creators worked together (for example in which BOTH Stan Lee and Jack Kirby did work). Accepts a comma-separated list of ids. (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: ComicDataWrapper
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func getComics(format: String? = nil, formatType: String? = nil, noVariants: Bool? = nil, dateDescriptor: String? = nil, dateRange: [Int]? = nil, title: String? = nil, titleStartsWith: String? = nil, startYear: Int? = nil, issueNumber: Int? = nil, diamondCode: String? = nil, digitalId: Int? = nil, upc: String? = nil, isbn: String? = nil, ean: String? = nil, issn: String? = nil, hasDigitalIssue: Bool? = nil, modifiedSince: Date? = nil, creators: [Int]? = nil, characters: [Int]? = nil, series: [Int]? = nil, events: [Int]? = nil, stories: [Int]? = nil, sharedAppearances: [Int]? = nil, collaborators: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> ComicDataWrapper {
        return try await withCheckedThrowingContinuation { continuation in
            getComicsWithRequestBuilder(format: format, formatType: formatType, noVariants: noVariants, dateDescriptor: dateDescriptor, dateRange: dateRange, title: title, titleStartsWith: titleStartsWith, startYear: startYear, issueNumber: issueNumber, diamondCode: diamondCode, digitalId: digitalId, upc: upc, isbn: isbn, ean: ean, issn: issn, hasDigitalIssue: hasDigitalIssue, modifiedSince: modifiedSince, creators: creators, characters: characters, series: series, events: events, stories: stories, sharedAppearances: sharedAppearances, collaborators: collaborators, orderBy: orderBy, limit: limit, offset: offset).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Fetches lists of comics.
     - GET /v1/public/comics
     - Fetches lists of comics with optional filters. See notes on individual parameters below.
     - API Key:
       - type: apiKey apiKey 
       - name: ApiKey
     - parameter format: (query) Filter by the issue format (e.g. comic, digital comic, hardcover). (optional)
     - parameter formatType: (query) Filter by the issue format type (comic or collection). (optional)
     - parameter noVariants: (query) Exclude variants (alternate covers, secondary printings, director&#39;s cuts, etc.) from the result set. (optional)
     - parameter dateDescriptor: (query) Return comics within a predefined date range. (optional)
     - parameter dateRange: (query) Return comics within a predefined date range.  Dates must be specified as date1,date2 (e.g. 2013-01-01,2013-01-02).  Dates are preferably formatted as YYYY-MM-DD but may be sent as any common date format. (optional)
     - parameter title: (query) Return only issues in series whose title matches the input. (optional)
     - parameter titleStartsWith: (query) Return only issues in series whose title starts with the input. (optional)
     - parameter startYear: (query) Return only issues in series whose start year matches the input. (optional)
     - parameter issueNumber: (query) Return only issues in series whose issue number matches the input. (optional)
     - parameter diamondCode: (query) Filter by diamond code. (optional)
     - parameter digitalId: (query) Filter by digital comic id. (optional)
     - parameter upc: (query) Filter by UPC. (optional)
     - parameter isbn: (query) Filter by ISBN. (optional)
     - parameter ean: (query) Filter by EAN. (optional)
     - parameter issn: (query) Filter by ISSN. (optional)
     - parameter hasDigitalIssue: (query) Include only results which are available digitally. (optional)
     - parameter modifiedSince: (query) Return only comics which have been modified since the specified date. (optional)
     - parameter creators: (query) Return only comics which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     - parameter characters: (query) Return only comics which feature the specified characters (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only comics which are part of the specified series (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only comics which take place in the specified events (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only comics which contain the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter sharedAppearances: (query) Return only comics in which the specified characters appear together (for example in which BOTH Spider-Man and Wolverine appear). Accepts a comma-separated list of ids. (optional)
     - parameter collaborators: (query) Return only comics in which the specified creators worked together (for example in which BOTH Stan Lee and Jack Kirby did work). Accepts a comma-separated list of ids. (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - returns: RequestBuilder<ComicDataWrapper> 
     */
    open class func getComicsWithRequestBuilder(format: String? = nil, formatType: String? = nil, noVariants: Bool? = nil, dateDescriptor: String? = nil, dateRange: [Int]? = nil, title: String? = nil, titleStartsWith: String? = nil, startYear: Int? = nil, issueNumber: Int? = nil, diamondCode: String? = nil, digitalId: Int? = nil, upc: String? = nil, isbn: String? = nil, ean: String? = nil, issn: String? = nil, hasDigitalIssue: Bool? = nil, modifiedSince: Date? = nil, creators: [Int]? = nil, characters: [Int]? = nil, series: [Int]? = nil, events: [Int]? = nil, stories: [Int]? = nil, sharedAppearances: [Int]? = nil, collaborators: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<ComicDataWrapper> {
        let localVariablePath = "/v1/public/comics"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "format": format?.encodeToJSON(),
            "formatType": formatType?.encodeToJSON(),
            "noVariants": noVariants?.encodeToJSON(),
            "dateDescriptor": dateDescriptor?.encodeToJSON(),
            "dateRange": dateRange?.encodeToJSON(),
            "title": title?.encodeToJSON(),
            "titleStartsWith": titleStartsWith?.encodeToJSON(),
            "startYear": startYear?.encodeToJSON(),
            "issueNumber": issueNumber?.encodeToJSON(),
            "diamondCode": diamondCode?.encodeToJSON(),
            "digitalId": digitalId?.encodeToJSON(),
            "upc": upc?.encodeToJSON(),
            "isbn": isbn?.encodeToJSON(),
            "ean": ean?.encodeToJSON(),
            "issn": issn?.encodeToJSON(),
            "hasDigitalIssue": hasDigitalIssue?.encodeToJSON(),
            "modifiedSince": modifiedSince?.encodeToJSON(),
            "creators": creators?.encodeToJSON(),
            "characters": characters?.encodeToJSON(),
            "series": series?.encodeToJSON(),
            "events": events?.encodeToJSON(),
            "stories": stories?.encodeToJSON(),
            "sharedAppearances": sharedAppearances?.encodeToJSON(),
            "collaborators": collaborators?.encodeToJSON(),
            "orderBy": orderBy?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ComicDataWrapper>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Fetches lists of comics filtered by a character id.
     
     - parameter characterId: (path) The character id. 
     - parameter format: (query) Filter by the issue format (e.g. comic, digital comic, hardcover). (optional)
     - parameter formatType: (query) Filter by the issue format type (comic or collection). (optional)
     - parameter noVariants: (query) Exclude variant comics from the result set. (optional)
     - parameter dateDescriptor: (query) Return comics within a predefined date range. (optional)
     - parameter dateRange: (query) Return comics within a predefined date range.  Dates must be specified as date1,date2 (e.g. 2013-01-01,2013-01-02).  Dates are preferably formatted as YYYY-MM-DD but may be sent as any common date format. (optional)
     - parameter title: (query) Return only issues in series whose title matches the input. (optional)
     - parameter titleStartsWith: (query) Return only issues in series whose title starts with the input. (optional)
     - parameter startYear: (query) Return only issues in series whose start year matches the input. (optional)
     - parameter issueNumber: (query) Return only issues in series whose issue number matches the input. (optional)
     - parameter diamondCode: (query) Filter by diamond code. (optional)
     - parameter digitalId: (query) Filter by digital comic id. (optional)
     - parameter upc: (query) Filter by UPC. (optional)
     - parameter isbn: (query) Filter by ISBN. (optional)
     - parameter ean: (query) Filter by EAN. (optional)
     - parameter issn: (query) Filter by ISSN. (optional)
     - parameter hasDigitalIssue: (query) Include only results which are available digitally. (optional)
     - parameter modifiedSince: (query) Return only comics which have been modified since the specified date. (optional)
     - parameter creators: (query) Return only comics which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only comics which are part of the specified series (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only comics which take place in the specified events (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only comics which contain the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter sharedAppearances: (query) Return only comics in which the specified characters appear together (for example in which BOTH Spider-Man and Wolverine appear). (optional)
     - parameter collaborators: (query) Return only comics in which the specified creators worked together (for example in which BOTH Stan Lee and Jack Kirby did work). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: ComicDataWrapper
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func getComicsFilteredByCharacter(characterId: Int, format: String? = nil, formatType: String? = nil, noVariants: Bool? = nil, dateDescriptor: String? = nil, dateRange: [Int]? = nil, title: String? = nil, titleStartsWith: String? = nil, startYear: Int? = nil, issueNumber: Int? = nil, diamondCode: String? = nil, digitalId: Int? = nil, upc: String? = nil, isbn: String? = nil, ean: String? = nil, issn: String? = nil, hasDigitalIssue: Bool? = nil, modifiedSince: Date? = nil, creators: [Int]? = nil, series: [Int]? = nil, events: [Int]? = nil, stories: [Int]? = nil, sharedAppearances: [Int]? = nil, collaborators: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> ComicDataWrapper {
        return try await withCheckedThrowingContinuation { continuation in
            getComicsFilteredByCharacterWithRequestBuilder(characterId: characterId, format: format, formatType: formatType, noVariants: noVariants, dateDescriptor: dateDescriptor, dateRange: dateRange, title: title, titleStartsWith: titleStartsWith, startYear: startYear, issueNumber: issueNumber, diamondCode: diamondCode, digitalId: digitalId, upc: upc, isbn: isbn, ean: ean, issn: issn, hasDigitalIssue: hasDigitalIssue, modifiedSince: modifiedSince, creators: creators, series: series, events: events, stories: stories, sharedAppearances: sharedAppearances, collaborators: collaborators, orderBy: orderBy, limit: limit, offset: offset).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Fetches lists of comics filtered by a character id.
     - GET /v1/public/characters/{characterId}/comics
     - Fetches lists of comics containing a specific character, with optional filters. See notes on individual parameters below.
     - API Key:
       - type: apiKey apiKey 
       - name: ApiKey
     - parameter characterId: (path) The character id. 
     - parameter format: (query) Filter by the issue format (e.g. comic, digital comic, hardcover). (optional)
     - parameter formatType: (query) Filter by the issue format type (comic or collection). (optional)
     - parameter noVariants: (query) Exclude variant comics from the result set. (optional)
     - parameter dateDescriptor: (query) Return comics within a predefined date range. (optional)
     - parameter dateRange: (query) Return comics within a predefined date range.  Dates must be specified as date1,date2 (e.g. 2013-01-01,2013-01-02).  Dates are preferably formatted as YYYY-MM-DD but may be sent as any common date format. (optional)
     - parameter title: (query) Return only issues in series whose title matches the input. (optional)
     - parameter titleStartsWith: (query) Return only issues in series whose title starts with the input. (optional)
     - parameter startYear: (query) Return only issues in series whose start year matches the input. (optional)
     - parameter issueNumber: (query) Return only issues in series whose issue number matches the input. (optional)
     - parameter diamondCode: (query) Filter by diamond code. (optional)
     - parameter digitalId: (query) Filter by digital comic id. (optional)
     - parameter upc: (query) Filter by UPC. (optional)
     - parameter isbn: (query) Filter by ISBN. (optional)
     - parameter ean: (query) Filter by EAN. (optional)
     - parameter issn: (query) Filter by ISSN. (optional)
     - parameter hasDigitalIssue: (query) Include only results which are available digitally. (optional)
     - parameter modifiedSince: (query) Return only comics which have been modified since the specified date. (optional)
     - parameter creators: (query) Return only comics which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only comics which are part of the specified series (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only comics which take place in the specified events (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only comics which contain the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter sharedAppearances: (query) Return only comics in which the specified characters appear together (for example in which BOTH Spider-Man and Wolverine appear). (optional)
     - parameter collaborators: (query) Return only comics in which the specified creators worked together (for example in which BOTH Stan Lee and Jack Kirby did work). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - returns: RequestBuilder<ComicDataWrapper> 
     */
    open class func getComicsFilteredByCharacterWithRequestBuilder(characterId: Int, format: String? = nil, formatType: String? = nil, noVariants: Bool? = nil, dateDescriptor: String? = nil, dateRange: [Int]? = nil, title: String? = nil, titleStartsWith: String? = nil, startYear: Int? = nil, issueNumber: Int? = nil, diamondCode: String? = nil, digitalId: Int? = nil, upc: String? = nil, isbn: String? = nil, ean: String? = nil, issn: String? = nil, hasDigitalIssue: Bool? = nil, modifiedSince: Date? = nil, creators: [Int]? = nil, series: [Int]? = nil, events: [Int]? = nil, stories: [Int]? = nil, sharedAppearances: [Int]? = nil, collaborators: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<ComicDataWrapper> {
        var localVariablePath = "/v1/public/characters/{characterId}/comics"
        let characterIdPreEscape = "\(APIHelper.mapValueToPathItem(characterId))"
        let characterIdPostEscape = characterIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{characterId}", with: characterIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "format": format?.encodeToJSON(),
            "formatType": formatType?.encodeToJSON(),
            "noVariants": noVariants?.encodeToJSON(),
            "dateDescriptor": dateDescriptor?.encodeToJSON(),
            "dateRange": dateRange?.encodeToJSON(),
            "title": title?.encodeToJSON(),
            "titleStartsWith": titleStartsWith?.encodeToJSON(),
            "startYear": startYear?.encodeToJSON(),
            "issueNumber": issueNumber?.encodeToJSON(),
            "diamondCode": diamondCode?.encodeToJSON(),
            "digitalId": digitalId?.encodeToJSON(),
            "upc": upc?.encodeToJSON(),
            "isbn": isbn?.encodeToJSON(),
            "ean": ean?.encodeToJSON(),
            "issn": issn?.encodeToJSON(),
            "hasDigitalIssue": hasDigitalIssue?.encodeToJSON(),
            "modifiedSince": modifiedSince?.encodeToJSON(),
            "creators": creators?.encodeToJSON(),
            "series": series?.encodeToJSON(),
            "events": events?.encodeToJSON(),
            "stories": stories?.encodeToJSON(),
            "sharedAppearances": sharedAppearances?.encodeToJSON(),
            "collaborators": collaborators?.encodeToJSON(),
            "orderBy": orderBy?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ComicDataWrapper>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Fetches lists of comics filtered by a creator id.
     
     - parameter creatorId: (path) The creator ID. 
     - parameter format: (query) Filter by the issue format (e.g. comic, digital comic, hardcover). (optional)
     - parameter formatType: (query) Filter by the issue format type (comic or collection). (optional)
     - parameter noVariants: (query) Exclude variant comics from the result set. (optional)
     - parameter dateDescriptor: (query) Return comics within a predefined date range. (optional)
     - parameter dateRange: (query) Return comics within a predefined date range.  Dates must be specified as date1,date2 (e.g. 2013-01-01,2013-01-02).  Dates are preferably formatted as YYYY-MM-DD but may be sent as any common date format. (optional)
     - parameter title: (query) Return only issues in series whose title matches the input. (optional)
     - parameter titleStartsWith: (query) Return only issues in series whose title starts with the input. (optional)
     - parameter startYear: (query) Return only issues in series whose start year matches the input. (optional)
     - parameter issueNumber: (query) Return only issues in series whose issue number matches the input. (optional)
     - parameter diamondCode: (query) Filter by diamond code. (optional)
     - parameter digitalId: (query) Filter by digital comic id. (optional)
     - parameter upc: (query) Filter by UPC. (optional)
     - parameter isbn: (query) Filter by ISBN. (optional)
     - parameter ean: (query) Filter by EAN. (optional)
     - parameter issn: (query) Filter by ISSN. (optional)
     - parameter hasDigitalIssue: (query) Include only results which are available digitally. (optional)
     - parameter modifiedSince: (query) Return only comics which have been modified since the specified date. (optional)
     - parameter characters: (query) Return only comics which feature the specified characters (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only comics which are part of the specified series (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only comics which take place in the specified events (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only comics which contain the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter sharedAppearances: (query) Return only comics in which the specified characters appear together (for example in which BOTH Spider-Man and Wolverine appear). (optional)
     - parameter collaborators: (query) Return only comics in which the specified creators worked together (for example in which BOTH Stan Lee and Jack Kirby did work). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: ComicDataWrapper
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func getComicsFilteredByCreator(creatorId: Int, format: String? = nil, formatType: String? = nil, noVariants: Bool? = nil, dateDescriptor: String? = nil, dateRange: [Int]? = nil, title: String? = nil, titleStartsWith: String? = nil, startYear: Int? = nil, issueNumber: Int? = nil, diamondCode: String? = nil, digitalId: Int? = nil, upc: String? = nil, isbn: String? = nil, ean: String? = nil, issn: String? = nil, hasDigitalIssue: [Bool]? = nil, modifiedSince: Date? = nil, characters: [Int]? = nil, series: [Int]? = nil, events: [Int]? = nil, stories: [Int]? = nil, sharedAppearances: [Int]? = nil, collaborators: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> ComicDataWrapper {
        return try await withCheckedThrowingContinuation { continuation in
            getComicsFilteredByCreatorWithRequestBuilder(creatorId: creatorId, format: format, formatType: formatType, noVariants: noVariants, dateDescriptor: dateDescriptor, dateRange: dateRange, title: title, titleStartsWith: titleStartsWith, startYear: startYear, issueNumber: issueNumber, diamondCode: diamondCode, digitalId: digitalId, upc: upc, isbn: isbn, ean: ean, issn: issn, hasDigitalIssue: hasDigitalIssue, modifiedSince: modifiedSince, characters: characters, series: series, events: events, stories: stories, sharedAppearances: sharedAppearances, collaborators: collaborators, orderBy: orderBy, limit: limit, offset: offset).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Fetches lists of comics filtered by a creator id.
     - GET /v1/public/creators/{creatorId}/comics
     - Fetches lists of comics in which the work of a specific creator appears, with optional filters. See notes on individual parameters below.
     - API Key:
       - type: apiKey apiKey 
       - name: ApiKey
     - parameter creatorId: (path) The creator ID. 
     - parameter format: (query) Filter by the issue format (e.g. comic, digital comic, hardcover). (optional)
     - parameter formatType: (query) Filter by the issue format type (comic or collection). (optional)
     - parameter noVariants: (query) Exclude variant comics from the result set. (optional)
     - parameter dateDescriptor: (query) Return comics within a predefined date range. (optional)
     - parameter dateRange: (query) Return comics within a predefined date range.  Dates must be specified as date1,date2 (e.g. 2013-01-01,2013-01-02).  Dates are preferably formatted as YYYY-MM-DD but may be sent as any common date format. (optional)
     - parameter title: (query) Return only issues in series whose title matches the input. (optional)
     - parameter titleStartsWith: (query) Return only issues in series whose title starts with the input. (optional)
     - parameter startYear: (query) Return only issues in series whose start year matches the input. (optional)
     - parameter issueNumber: (query) Return only issues in series whose issue number matches the input. (optional)
     - parameter diamondCode: (query) Filter by diamond code. (optional)
     - parameter digitalId: (query) Filter by digital comic id. (optional)
     - parameter upc: (query) Filter by UPC. (optional)
     - parameter isbn: (query) Filter by ISBN. (optional)
     - parameter ean: (query) Filter by EAN. (optional)
     - parameter issn: (query) Filter by ISSN. (optional)
     - parameter hasDigitalIssue: (query) Include only results which are available digitally. (optional)
     - parameter modifiedSince: (query) Return only comics which have been modified since the specified date. (optional)
     - parameter characters: (query) Return only comics which feature the specified characters (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only comics which are part of the specified series (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only comics which take place in the specified events (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only comics which contain the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter sharedAppearances: (query) Return only comics in which the specified characters appear together (for example in which BOTH Spider-Man and Wolverine appear). (optional)
     - parameter collaborators: (query) Return only comics in which the specified creators worked together (for example in which BOTH Stan Lee and Jack Kirby did work). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - returns: RequestBuilder<ComicDataWrapper> 
     */
    open class func getComicsFilteredByCreatorWithRequestBuilder(creatorId: Int, format: String? = nil, formatType: String? = nil, noVariants: Bool? = nil, dateDescriptor: String? = nil, dateRange: [Int]? = nil, title: String? = nil, titleStartsWith: String? = nil, startYear: Int? = nil, issueNumber: Int? = nil, diamondCode: String? = nil, digitalId: Int? = nil, upc: String? = nil, isbn: String? = nil, ean: String? = nil, issn: String? = nil, hasDigitalIssue: [Bool]? = nil, modifiedSince: Date? = nil, characters: [Int]? = nil, series: [Int]? = nil, events: [Int]? = nil, stories: [Int]? = nil, sharedAppearances: [Int]? = nil, collaborators: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<ComicDataWrapper> {
        var localVariablePath = "/v1/public/creators/{creatorId}/comics"
        let creatorIdPreEscape = "\(APIHelper.mapValueToPathItem(creatorId))"
        let creatorIdPostEscape = creatorIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{creatorId}", with: creatorIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "format": format?.encodeToJSON(),
            "formatType": formatType?.encodeToJSON(),
            "noVariants": noVariants?.encodeToJSON(),
            "dateDescriptor": dateDescriptor?.encodeToJSON(),
            "dateRange": dateRange?.encodeToJSON(),
            "title": title?.encodeToJSON(),
            "titleStartsWith": titleStartsWith?.encodeToJSON(),
            "startYear": startYear?.encodeToJSON(),
            "issueNumber": issueNumber?.encodeToJSON(),
            "diamondCode": diamondCode?.encodeToJSON(),
            "digitalId": digitalId?.encodeToJSON(),
            "upc": upc?.encodeToJSON(),
            "isbn": isbn?.encodeToJSON(),
            "ean": ean?.encodeToJSON(),
            "issn": issn?.encodeToJSON(),
            "hasDigitalIssue": hasDigitalIssue?.encodeToJSON(),
            "modifiedSince": modifiedSince?.encodeToJSON(),
            "characters": characters?.encodeToJSON(),
            "series": series?.encodeToJSON(),
            "events": events?.encodeToJSON(),
            "stories": stories?.encodeToJSON(),
            "sharedAppearances": sharedAppearances?.encodeToJSON(),
            "collaborators": collaborators?.encodeToJSON(),
            "orderBy": orderBy?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ComicDataWrapper>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Fetches lists of comics filtered by an event id.
     
     - parameter eventId: (path) The event id. 
     - parameter format: (query) Filter by the issue format (e.g. comic, digital comic, hardcover). (optional)
     - parameter formatType: (query) Filter by the issue format type (comic or collection). (optional)
     - parameter noVariants: (query) Exclude variant comics from the result set. (optional)
     - parameter dateDescriptor: (query) Return comics within a predefined date range. (optional)
     - parameter dateRange: (query) Return comics within a predefined date range.  Dates must be specified as date1,date2 (e.g. 2013-01-01,2013-01-02).  Dates are preferably formatted as YYYY-MM-DD but may be sent as any common date format. (optional)
     - parameter title: (query) Return only issues in series whose title matches the input. (optional)
     - parameter titleStartsWith: (query) Return only issues in series whose title starts with the input. (optional)
     - parameter startYear: (query) Return only issues in series whose start year matches the input. (optional)
     - parameter issueNumber: (query) Return only issues in series whose issue number matches the input. (optional)
     - parameter diamondCode: (query) Filter by diamond code. (optional)
     - parameter digitalId: (query) Filter by digital comic id. (optional)
     - parameter upc: (query) Filter by UPC. (optional)
     - parameter isbn: (query) Filter by ISBN. (optional)
     - parameter ean: (query) Filter by EAN. (optional)
     - parameter issn: (query) Filter by ISSN. (optional)
     - parameter hasDigitalIssue: (query) Include only results which are available digitally. (optional)
     - parameter modifiedSince: (query) Return only comics which have been modified since the specified date. (optional)
     - parameter creators: (query) Return only comics which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     - parameter characters: (query) Return only comics which feature the specified characters (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only comics which are part of the specified series (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only comics which take place in the specified events (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only comics which contain the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter sharedAppearances: (query) Return only comics in which the specified characters appear together (for example in which BOTH Spider-Man and Wolverine appear). (optional)
     - parameter collaborators: (query) Return only comics in which the specified creators worked together (for example in which BOTH Stan Lee and Jack Kirby did work). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: ComicDataWrapper
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func getComicsFilteredByEvent(eventId: Int, format: String? = nil, formatType: String? = nil, noVariants: [Bool]? = nil, dateDescriptor: [String]? = nil, dateRange: [Int]? = nil, title: String? = nil, titleStartsWith: String? = nil, startYear: Int? = nil, issueNumber: Int? = nil, diamondCode: String? = nil, digitalId: Int? = nil, upc: String? = nil, isbn: String? = nil, ean: String? = nil, issn: String? = nil, hasDigitalIssue: [Bool]? = nil, modifiedSince: Date? = nil, creators: [Int]? = nil, characters: [Int]? = nil, series: [Int]? = nil, events: [Int]? = nil, stories: [Int]? = nil, sharedAppearances: [Int]? = nil, collaborators: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> ComicDataWrapper {
        return try await withCheckedThrowingContinuation { continuation in
            getComicsFilteredByEventWithRequestBuilder(eventId: eventId, format: format, formatType: formatType, noVariants: noVariants, dateDescriptor: dateDescriptor, dateRange: dateRange, title: title, titleStartsWith: titleStartsWith, startYear: startYear, issueNumber: issueNumber, diamondCode: diamondCode, digitalId: digitalId, upc: upc, isbn: isbn, ean: ean, issn: issn, hasDigitalIssue: hasDigitalIssue, modifiedSince: modifiedSince, creators: creators, characters: characters, series: series, events: events, stories: stories, sharedAppearances: sharedAppearances, collaborators: collaborators, orderBy: orderBy, limit: limit, offset: offset).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Fetches lists of comics filtered by an event id.
     - GET /v1/public/events/{eventId}/comics
     - Fetches lists of comics which take place during a specific event, with optional filters. See notes on individual parameters below.
     - API Key:
       - type: apiKey apiKey 
       - name: ApiKey
     - parameter eventId: (path) The event id. 
     - parameter format: (query) Filter by the issue format (e.g. comic, digital comic, hardcover). (optional)
     - parameter formatType: (query) Filter by the issue format type (comic or collection). (optional)
     - parameter noVariants: (query) Exclude variant comics from the result set. (optional)
     - parameter dateDescriptor: (query) Return comics within a predefined date range. (optional)
     - parameter dateRange: (query) Return comics within a predefined date range.  Dates must be specified as date1,date2 (e.g. 2013-01-01,2013-01-02).  Dates are preferably formatted as YYYY-MM-DD but may be sent as any common date format. (optional)
     - parameter title: (query) Return only issues in series whose title matches the input. (optional)
     - parameter titleStartsWith: (query) Return only issues in series whose title starts with the input. (optional)
     - parameter startYear: (query) Return only issues in series whose start year matches the input. (optional)
     - parameter issueNumber: (query) Return only issues in series whose issue number matches the input. (optional)
     - parameter diamondCode: (query) Filter by diamond code. (optional)
     - parameter digitalId: (query) Filter by digital comic id. (optional)
     - parameter upc: (query) Filter by UPC. (optional)
     - parameter isbn: (query) Filter by ISBN. (optional)
     - parameter ean: (query) Filter by EAN. (optional)
     - parameter issn: (query) Filter by ISSN. (optional)
     - parameter hasDigitalIssue: (query) Include only results which are available digitally. (optional)
     - parameter modifiedSince: (query) Return only comics which have been modified since the specified date. (optional)
     - parameter creators: (query) Return only comics which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     - parameter characters: (query) Return only comics which feature the specified characters (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only comics which are part of the specified series (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only comics which take place in the specified events (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only comics which contain the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter sharedAppearances: (query) Return only comics in which the specified characters appear together (for example in which BOTH Spider-Man and Wolverine appear). (optional)
     - parameter collaborators: (query) Return only comics in which the specified creators worked together (for example in which BOTH Stan Lee and Jack Kirby did work). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - returns: RequestBuilder<ComicDataWrapper> 
     */
    open class func getComicsFilteredByEventWithRequestBuilder(eventId: Int, format: String? = nil, formatType: String? = nil, noVariants: [Bool]? = nil, dateDescriptor: [String]? = nil, dateRange: [Int]? = nil, title: String? = nil, titleStartsWith: String? = nil, startYear: Int? = nil, issueNumber: Int? = nil, diamondCode: String? = nil, digitalId: Int? = nil, upc: String? = nil, isbn: String? = nil, ean: String? = nil, issn: String? = nil, hasDigitalIssue: [Bool]? = nil, modifiedSince: Date? = nil, creators: [Int]? = nil, characters: [Int]? = nil, series: [Int]? = nil, events: [Int]? = nil, stories: [Int]? = nil, sharedAppearances: [Int]? = nil, collaborators: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<ComicDataWrapper> {
        var localVariablePath = "/v1/public/events/{eventId}/comics"
        let eventIdPreEscape = "\(APIHelper.mapValueToPathItem(eventId))"
        let eventIdPostEscape = eventIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{eventId}", with: eventIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "format": format?.encodeToJSON(),
            "formatType": formatType?.encodeToJSON(),
            "noVariants": noVariants?.encodeToJSON(),
            "dateDescriptor": dateDescriptor?.encodeToJSON(),
            "dateRange": dateRange?.encodeToJSON(),
            "title": title?.encodeToJSON(),
            "titleStartsWith": titleStartsWith?.encodeToJSON(),
            "startYear": startYear?.encodeToJSON(),
            "issueNumber": issueNumber?.encodeToJSON(),
            "diamondCode": diamondCode?.encodeToJSON(),
            "digitalId": digitalId?.encodeToJSON(),
            "upc": upc?.encodeToJSON(),
            "isbn": isbn?.encodeToJSON(),
            "ean": ean?.encodeToJSON(),
            "issn": issn?.encodeToJSON(),
            "hasDigitalIssue": hasDigitalIssue?.encodeToJSON(),
            "modifiedSince": modifiedSince?.encodeToJSON(),
            "creators": creators?.encodeToJSON(),
            "characters": characters?.encodeToJSON(),
            "series": series?.encodeToJSON(),
            "events": events?.encodeToJSON(),
            "stories": stories?.encodeToJSON(),
            "sharedAppearances": sharedAppearances?.encodeToJSON(),
            "collaborators": collaborators?.encodeToJSON(),
            "orderBy": orderBy?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ComicDataWrapper>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Fetches lists of comics filtered by a series id.
     
     - parameter seriesId: (path) The series ID. 
     - parameter format: (query) Filter by the issue format (e.g. comic, digital comic, hardcover). (optional)
     - parameter formatType: (query) Filter by the issue format type (comic or collection). (optional)
     - parameter noVariants: (query) Exclude variant comics from the result set. (optional)
     - parameter dateDescriptor: (query) Return comics within a predefined date range. (optional)
     - parameter dateRange: (query) Return comics within a predefined date range.  Dates must be specified as date1,date2 (e.g. 2013-01-01,2013-01-02).  Dates are preferably formatted as YYYY-MM-DD but may be sent as any common date format. (optional)
     - parameter title: (query) Return only issues in series whose title matches the input. (optional)
     - parameter titleStartsWith: (query) Return only issues in series whose title starts with the input. (optional)
     - parameter startYear: (query) Return only issues in series whose start year matches the input. (optional)
     - parameter issueNumber: (query) Return only issues in series whose issue number matches the input. (optional)
     - parameter diamondCode: (query) Filter by diamond code. (optional)
     - parameter digitalId: (query) Filter by digital comic id. (optional)
     - parameter upc: (query) Filter by UPC. (optional)
     - parameter isbn: (query) Filter by ISBN. (optional)
     - parameter ean: (query) Filter by EAN. (optional)
     - parameter issn: (query) Filter by ISSN. (optional)
     - parameter hasDigitalIssue: (query) Include only results which are available digitally. (optional)
     - parameter modifiedSince: (query) Return only comics which have been modified since the specified date. (optional)
     - parameter creators: (query) Return only comics which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     - parameter characters: (query) Return only comics which feature the specified characters (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only comics which take place in the specified events (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only comics which contain the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter sharedAppearances: (query) Return only comics in which the specified characters appear together (for example in which BOTH Spider-Man and Wolverine appear). (optional)
     - parameter collaborators: (query) Return only comics in which the specified creators worked together (for example in which BOTH Stan Lee and Jack Kirby did work). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: ComicDataWrapper
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func getComicsFilteredBySeries(seriesId: Int, format: String? = nil, formatType: String? = nil, noVariants: [Bool]? = nil, dateDescriptor: [String]? = nil, dateRange: [Int]? = nil, title: String? = nil, titleStartsWith: String? = nil, startYear: Int? = nil, issueNumber: Int? = nil, diamondCode: String? = nil, digitalId: Int? = nil, upc: String? = nil, isbn: String? = nil, ean: String? = nil, issn: String? = nil, hasDigitalIssue: [Bool]? = nil, modifiedSince: Date? = nil, creators: [Int]? = nil, characters: [Int]? = nil, events: [Int]? = nil, stories: [Int]? = nil, sharedAppearances: [Int]? = nil, collaborators: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> ComicDataWrapper {
        return try await withCheckedThrowingContinuation { continuation in
            getComicsFilteredBySeriesWithRequestBuilder(seriesId: seriesId, format: format, formatType: formatType, noVariants: noVariants, dateDescriptor: dateDescriptor, dateRange: dateRange, title: title, titleStartsWith: titleStartsWith, startYear: startYear, issueNumber: issueNumber, diamondCode: diamondCode, digitalId: digitalId, upc: upc, isbn: isbn, ean: ean, issn: issn, hasDigitalIssue: hasDigitalIssue, modifiedSince: modifiedSince, creators: creators, characters: characters, events: events, stories: stories, sharedAppearances: sharedAppearances, collaborators: collaborators, orderBy: orderBy, limit: limit, offset: offset).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Fetches lists of comics filtered by a series id.
     - GET /v1/public/series/{seriesId}/comics
     - Fetches lists of comics which are published as part of a specific series, with optional filters. See notes on individual parameters below.
     - API Key:
       - type: apiKey apiKey 
       - name: ApiKey
     - parameter seriesId: (path) The series ID. 
     - parameter format: (query) Filter by the issue format (e.g. comic, digital comic, hardcover). (optional)
     - parameter formatType: (query) Filter by the issue format type (comic or collection). (optional)
     - parameter noVariants: (query) Exclude variant comics from the result set. (optional)
     - parameter dateDescriptor: (query) Return comics within a predefined date range. (optional)
     - parameter dateRange: (query) Return comics within a predefined date range.  Dates must be specified as date1,date2 (e.g. 2013-01-01,2013-01-02).  Dates are preferably formatted as YYYY-MM-DD but may be sent as any common date format. (optional)
     - parameter title: (query) Return only issues in series whose title matches the input. (optional)
     - parameter titleStartsWith: (query) Return only issues in series whose title starts with the input. (optional)
     - parameter startYear: (query) Return only issues in series whose start year matches the input. (optional)
     - parameter issueNumber: (query) Return only issues in series whose issue number matches the input. (optional)
     - parameter diamondCode: (query) Filter by diamond code. (optional)
     - parameter digitalId: (query) Filter by digital comic id. (optional)
     - parameter upc: (query) Filter by UPC. (optional)
     - parameter isbn: (query) Filter by ISBN. (optional)
     - parameter ean: (query) Filter by EAN. (optional)
     - parameter issn: (query) Filter by ISSN. (optional)
     - parameter hasDigitalIssue: (query) Include only results which are available digitally. (optional)
     - parameter modifiedSince: (query) Return only comics which have been modified since the specified date. (optional)
     - parameter creators: (query) Return only comics which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     - parameter characters: (query) Return only comics which feature the specified characters (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only comics which take place in the specified events (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only comics which contain the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter sharedAppearances: (query) Return only comics in which the specified characters appear together (for example in which BOTH Spider-Man and Wolverine appear). (optional)
     - parameter collaborators: (query) Return only comics in which the specified creators worked together (for example in which BOTH Stan Lee and Jack Kirby did work). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - returns: RequestBuilder<ComicDataWrapper> 
     */
    open class func getComicsFilteredBySeriesWithRequestBuilder(seriesId: Int, format: String? = nil, formatType: String? = nil, noVariants: [Bool]? = nil, dateDescriptor: [String]? = nil, dateRange: [Int]? = nil, title: String? = nil, titleStartsWith: String? = nil, startYear: Int? = nil, issueNumber: Int? = nil, diamondCode: String? = nil, digitalId: Int? = nil, upc: String? = nil, isbn: String? = nil, ean: String? = nil, issn: String? = nil, hasDigitalIssue: [Bool]? = nil, modifiedSince: Date? = nil, creators: [Int]? = nil, characters: [Int]? = nil, events: [Int]? = nil, stories: [Int]? = nil, sharedAppearances: [Int]? = nil, collaborators: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<ComicDataWrapper> {
        var localVariablePath = "/v1/public/series/{seriesId}/comics"
        let seriesIdPreEscape = "\(APIHelper.mapValueToPathItem(seriesId))"
        let seriesIdPostEscape = seriesIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{seriesId}", with: seriesIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "format": format?.encodeToJSON(),
            "formatType": formatType?.encodeToJSON(),
            "noVariants": noVariants?.encodeToJSON(),
            "dateDescriptor": dateDescriptor?.encodeToJSON(),
            "dateRange": dateRange?.encodeToJSON(),
            "title": title?.encodeToJSON(),
            "titleStartsWith": titleStartsWith?.encodeToJSON(),
            "startYear": startYear?.encodeToJSON(),
            "issueNumber": issueNumber?.encodeToJSON(),
            "diamondCode": diamondCode?.encodeToJSON(),
            "digitalId": digitalId?.encodeToJSON(),
            "upc": upc?.encodeToJSON(),
            "isbn": isbn?.encodeToJSON(),
            "ean": ean?.encodeToJSON(),
            "issn": issn?.encodeToJSON(),
            "hasDigitalIssue": hasDigitalIssue?.encodeToJSON(),
            "modifiedSince": modifiedSince?.encodeToJSON(),
            "creators": creators?.encodeToJSON(),
            "characters": characters?.encodeToJSON(),
            "events": events?.encodeToJSON(),
            "stories": stories?.encodeToJSON(),
            "sharedAppearances": sharedAppearances?.encodeToJSON(),
            "collaborators": collaborators?.encodeToJSON(),
            "orderBy": orderBy?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ComicDataWrapper>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Fetches lists of comics filtered by a story id.
     
     - parameter storyId: (path) The story ID. 
     - parameter format: (query) Filter by the issue format (e.g. comic, digital comic, hardcover). (optional)
     - parameter formatType: (query) Filter by the issue format type (comic or collection). (optional)
     - parameter noVariants: (query) Exclude variant comics from the result set. (optional)
     - parameter dateDescriptor: (query) Return comics within a predefined date range. (optional)
     - parameter dateRange: (query) Return comics within a predefined date range.  Dates must be specified as date1,date2 (e.g. 2013-01-01,2013-01-02).  Dates are preferably formatted as YYYY-MM-DD but may be sent as any common date format. (optional)
     - parameter title: (query) Return only issues in series whose title matches the input. (optional)
     - parameter titleStartsWith: (query) Return only issues in series whose title starts with the input. (optional)
     - parameter startYear: (query) Return only issues in series whose start year matches the input. (optional)
     - parameter issueNumber: (query) Return only issues in series whose issue number matches the input. (optional)
     - parameter diamondCode: (query) Filter by diamond code. (optional)
     - parameter digitalId: (query) Filter by digital comic id. (optional)
     - parameter upc: (query) Filter by UPC. (optional)
     - parameter isbn: (query) Filter by ISBN. (optional)
     - parameter ean: (query) Filter by EAN. (optional)
     - parameter issn: (query) Filter by ISSN. (optional)
     - parameter hasDigitalIssue: (query) Include only results which are available digitally. (optional)
     - parameter modifiedSince: (query) Return only comics which have been modified since the specified date. (optional)
     - parameter creators: (query) Return only comics which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     - parameter characters: (query) Return only comics which feature the specified characters (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only comics which are part of the specified series (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only comics which take place in the specified events (accepts a comma-separated list of ids). (optional)
     - parameter sharedAppearances: (query) Return only comics in which the specified characters appear together (for example in which BOTH Spider-Man and Wolverine appear). (optional)
     - parameter collaborators: (query) Return only comics in which the specified creators worked together (for example in which BOTH Stan Lee and Jack Kirby did work). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: ComicDataWrapper
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func getComicsFilteredByStory(storyId: Int, format: String? = nil, formatType: String? = nil, noVariants: [Bool]? = nil, dateDescriptor: [String]? = nil, dateRange: [Int]? = nil, title: String? = nil, titleStartsWith: String? = nil, startYear: Int? = nil, issueNumber: Int? = nil, diamondCode: String? = nil, digitalId: Int? = nil, upc: String? = nil, isbn: String? = nil, ean: String? = nil, issn: String? = nil, hasDigitalIssue: [Bool]? = nil, modifiedSince: Date? = nil, creators: [Int]? = nil, characters: [Int]? = nil, series: [Int]? = nil, events: [Int]? = nil, sharedAppearances: [Int]? = nil, collaborators: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> ComicDataWrapper {
        return try await withCheckedThrowingContinuation { continuation in
            getComicsFilteredByStoryWithRequestBuilder(storyId: storyId, format: format, formatType: formatType, noVariants: noVariants, dateDescriptor: dateDescriptor, dateRange: dateRange, title: title, titleStartsWith: titleStartsWith, startYear: startYear, issueNumber: issueNumber, diamondCode: diamondCode, digitalId: digitalId, upc: upc, isbn: isbn, ean: ean, issn: issn, hasDigitalIssue: hasDigitalIssue, modifiedSince: modifiedSince, creators: creators, characters: characters, series: series, events: events, sharedAppearances: sharedAppearances, collaborators: collaborators, orderBy: orderBy, limit: limit, offset: offset).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Fetches lists of comics filtered by a story id.
     - GET /v1/public/stories/{storyId}/comics
     - Fetches lists of comics in which a specific story appears, with optional filters. See notes on individual parameters below.
     - API Key:
       - type: apiKey apiKey 
       - name: ApiKey
     - parameter storyId: (path) The story ID. 
     - parameter format: (query) Filter by the issue format (e.g. comic, digital comic, hardcover). (optional)
     - parameter formatType: (query) Filter by the issue format type (comic or collection). (optional)
     - parameter noVariants: (query) Exclude variant comics from the result set. (optional)
     - parameter dateDescriptor: (query) Return comics within a predefined date range. (optional)
     - parameter dateRange: (query) Return comics within a predefined date range.  Dates must be specified as date1,date2 (e.g. 2013-01-01,2013-01-02).  Dates are preferably formatted as YYYY-MM-DD but may be sent as any common date format. (optional)
     - parameter title: (query) Return only issues in series whose title matches the input. (optional)
     - parameter titleStartsWith: (query) Return only issues in series whose title starts with the input. (optional)
     - parameter startYear: (query) Return only issues in series whose start year matches the input. (optional)
     - parameter issueNumber: (query) Return only issues in series whose issue number matches the input. (optional)
     - parameter diamondCode: (query) Filter by diamond code. (optional)
     - parameter digitalId: (query) Filter by digital comic id. (optional)
     - parameter upc: (query) Filter by UPC. (optional)
     - parameter isbn: (query) Filter by ISBN. (optional)
     - parameter ean: (query) Filter by EAN. (optional)
     - parameter issn: (query) Filter by ISSN. (optional)
     - parameter hasDigitalIssue: (query) Include only results which are available digitally. (optional)
     - parameter modifiedSince: (query) Return only comics which have been modified since the specified date. (optional)
     - parameter creators: (query) Return only comics which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     - parameter characters: (query) Return only comics which feature the specified characters (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only comics which are part of the specified series (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only comics which take place in the specified events (accepts a comma-separated list of ids). (optional)
     - parameter sharedAppearances: (query) Return only comics in which the specified characters appear together (for example in which BOTH Spider-Man and Wolverine appear). (optional)
     - parameter collaborators: (query) Return only comics in which the specified creators worked together (for example in which BOTH Stan Lee and Jack Kirby did work). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - returns: RequestBuilder<ComicDataWrapper> 
     */
    open class func getComicsFilteredByStoryWithRequestBuilder(storyId: Int, format: String? = nil, formatType: String? = nil, noVariants: [Bool]? = nil, dateDescriptor: [String]? = nil, dateRange: [Int]? = nil, title: String? = nil, titleStartsWith: String? = nil, startYear: Int? = nil, issueNumber: Int? = nil, diamondCode: String? = nil, digitalId: Int? = nil, upc: String? = nil, isbn: String? = nil, ean: String? = nil, issn: String? = nil, hasDigitalIssue: [Bool]? = nil, modifiedSince: Date? = nil, creators: [Int]? = nil, characters: [Int]? = nil, series: [Int]? = nil, events: [Int]? = nil, sharedAppearances: [Int]? = nil, collaborators: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<ComicDataWrapper> {
        var localVariablePath = "/v1/public/stories/{storyId}/comics"
        let storyIdPreEscape = "\(APIHelper.mapValueToPathItem(storyId))"
        let storyIdPostEscape = storyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{storyId}", with: storyIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "format": format?.encodeToJSON(),
            "formatType": formatType?.encodeToJSON(),
            "noVariants": noVariants?.encodeToJSON(),
            "dateDescriptor": dateDescriptor?.encodeToJSON(),
            "dateRange": dateRange?.encodeToJSON(),
            "title": title?.encodeToJSON(),
            "titleStartsWith": titleStartsWith?.encodeToJSON(),
            "startYear": startYear?.encodeToJSON(),
            "issueNumber": issueNumber?.encodeToJSON(),
            "diamondCode": diamondCode?.encodeToJSON(),
            "digitalId": digitalId?.encodeToJSON(),
            "upc": upc?.encodeToJSON(),
            "isbn": isbn?.encodeToJSON(),
            "ean": ean?.encodeToJSON(),
            "issn": issn?.encodeToJSON(),
            "hasDigitalIssue": hasDigitalIssue?.encodeToJSON(),
            "modifiedSince": modifiedSince?.encodeToJSON(),
            "creators": creators?.encodeToJSON(),
            "characters": characters?.encodeToJSON(),
            "series": series?.encodeToJSON(),
            "events": events?.encodeToJSON(),
            "sharedAppearances": sharedAppearances?.encodeToJSON(),
            "collaborators": collaborators?.encodeToJSON(),
            "orderBy": orderBy?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ComicDataWrapper>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Fetches lists of events filtered by a creator id.
     
     - parameter creatorId: (path) The creator ID. 
     - parameter name: (query) Filter the event list by name. (optional)
     - parameter nameStartsWith: (query) Return events with names that begin with the specified string (e.g. Sp). (optional)
     - parameter modifiedSince: (query) Return only events which have been modified since the specified date. (optional)
     - parameter characters: (query) Return only events which feature the specified characters (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only events which are part of the specified series (accepts a comma-separated list of ids). (optional)
     - parameter comics: (query) Return only events which take place in the specified comics (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only events which contain the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: EventDataWrapper
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func getCreatorEventsCollection(creatorId: Int, name: String? = nil, nameStartsWith: String? = nil, modifiedSince: Date? = nil, characters: [Int]? = nil, series: [Int]? = nil, comics: [Int]? = nil, stories: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> EventDataWrapper {
        return try await withCheckedThrowingContinuation { continuation in
            getCreatorEventsCollectionWithRequestBuilder(creatorId: creatorId, name: name, nameStartsWith: nameStartsWith, modifiedSince: modifiedSince, characters: characters, series: series, comics: comics, stories: stories, orderBy: orderBy, limit: limit, offset: offset).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Fetches lists of events filtered by a creator id.
     - GET /v1/public/creators/{creatorId}/events
     - Fetches lists of events featuring the work of a specific creator with optional filters. See notes on individual parameters below.
     - API Key:
       - type: apiKey apiKey 
       - name: ApiKey
     - parameter creatorId: (path) The creator ID. 
     - parameter name: (query) Filter the event list by name. (optional)
     - parameter nameStartsWith: (query) Return events with names that begin with the specified string (e.g. Sp). (optional)
     - parameter modifiedSince: (query) Return only events which have been modified since the specified date. (optional)
     - parameter characters: (query) Return only events which feature the specified characters (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only events which are part of the specified series (accepts a comma-separated list of ids). (optional)
     - parameter comics: (query) Return only events which take place in the specified comics (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only events which contain the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - returns: RequestBuilder<EventDataWrapper> 
     */
    open class func getCreatorEventsCollectionWithRequestBuilder(creatorId: Int, name: String? = nil, nameStartsWith: String? = nil, modifiedSince: Date? = nil, characters: [Int]? = nil, series: [Int]? = nil, comics: [Int]? = nil, stories: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<EventDataWrapper> {
        var localVariablePath = "/v1/public/creators/{creatorId}/events"
        let creatorIdPreEscape = "\(APIHelper.mapValueToPathItem(creatorId))"
        let creatorIdPostEscape = creatorIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{creatorId}", with: creatorIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": name?.encodeToJSON(),
            "nameStartsWith": nameStartsWith?.encodeToJSON(),
            "modifiedSince": modifiedSince?.encodeToJSON(),
            "characters": characters?.encodeToJSON(),
            "series": series?.encodeToJSON(),
            "comics": comics?.encodeToJSON(),
            "stories": stories?.encodeToJSON(),
            "orderBy": orderBy?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EventDataWrapper>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Fetches a single creator by id.
     
     - parameter creatorId: (path) A single creator id. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: CreatorDataWrapper
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func getCreatorIndividual(creatorId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> CreatorDataWrapper {
        return try await withCheckedThrowingContinuation { continuation in
            getCreatorIndividualWithRequestBuilder(creatorId: creatorId).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Fetches a single creator by id.
     - GET /v1/public/creators/{creatorId}
     - This method fetches a single creator resource.  It is the canonical URI for any creator resource provided by the API.
     - API Key:
       - type: apiKey apiKey 
       - name: ApiKey
     - parameter creatorId: (path) A single creator id. 
     - returns: RequestBuilder<CreatorDataWrapper> 
     */
    open class func getCreatorIndividualWithRequestBuilder(creatorId: Int) -> RequestBuilder<CreatorDataWrapper> {
        var localVariablePath = "/v1/public/creators/{creatorId}"
        let creatorIdPreEscape = "\(APIHelper.mapValueToPathItem(creatorId))"
        let creatorIdPostEscape = creatorIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{creatorId}", with: creatorIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreatorDataWrapper>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Fetches lists of series filtered by a creator id.
     
     - parameter creatorId: (path) The creator ID. 
     - parameter title: (query) Filter by series title. (optional)
     - parameter titleStartsWith: (query) Return series with titles that begin with the specified string (e.g. Sp). (optional)
     - parameter startYear: (query) Return only series matching the specified start year. (optional)
     - parameter modifiedSince: (query) Return only series which have been modified since the specified date. (optional)
     - parameter comics: (query) Return only series which contain the specified comics (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only series which contain the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only series which have comics that take place during the specified events (accepts a comma-separated list of ids). (optional)
     - parameter characters: (query) Return only series which feature the specified characters (accepts a comma-separated list of ids). (optional)
     - parameter seriesType: (query) Filter the series by publication frequency type. (optional)
     - parameter contains: (query) Return only series containing one or more comics with the specified format. (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: SeriesDataWrapper
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func getCreatorSeriesCollection(creatorId: Int, title: String? = nil, titleStartsWith: String? = nil, startYear: Int? = nil, modifiedSince: Date? = nil, comics: [Int]? = nil, stories: [Int]? = nil, events: [Int]? = nil, characters: [Int]? = nil, seriesType: String? = nil, contains: [String]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> SeriesDataWrapper {
        return try await withCheckedThrowingContinuation { continuation in
            getCreatorSeriesCollectionWithRequestBuilder(creatorId: creatorId, title: title, titleStartsWith: titleStartsWith, startYear: startYear, modifiedSince: modifiedSince, comics: comics, stories: stories, events: events, characters: characters, seriesType: seriesType, contains: contains, orderBy: orderBy, limit: limit, offset: offset).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Fetches lists of series filtered by a creator id.
     - GET /v1/public/creators/{creatorId}/series
     - Fetches lists of comic series in which a specific creator's work appears, with optional filters. See notes on individual parameters below.
     - API Key:
       - type: apiKey apiKey 
       - name: ApiKey
     - parameter creatorId: (path) The creator ID. 
     - parameter title: (query) Filter by series title. (optional)
     - parameter titleStartsWith: (query) Return series with titles that begin with the specified string (e.g. Sp). (optional)
     - parameter startYear: (query) Return only series matching the specified start year. (optional)
     - parameter modifiedSince: (query) Return only series which have been modified since the specified date. (optional)
     - parameter comics: (query) Return only series which contain the specified comics (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only series which contain the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only series which have comics that take place during the specified events (accepts a comma-separated list of ids). (optional)
     - parameter characters: (query) Return only series which feature the specified characters (accepts a comma-separated list of ids). (optional)
     - parameter seriesType: (query) Filter the series by publication frequency type. (optional)
     - parameter contains: (query) Return only series containing one or more comics with the specified format. (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - returns: RequestBuilder<SeriesDataWrapper> 
     */
    open class func getCreatorSeriesCollectionWithRequestBuilder(creatorId: Int, title: String? = nil, titleStartsWith: String? = nil, startYear: Int? = nil, modifiedSince: Date? = nil, comics: [Int]? = nil, stories: [Int]? = nil, events: [Int]? = nil, characters: [Int]? = nil, seriesType: String? = nil, contains: [String]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<SeriesDataWrapper> {
        var localVariablePath = "/v1/public/creators/{creatorId}/series"
        let creatorIdPreEscape = "\(APIHelper.mapValueToPathItem(creatorId))"
        let creatorIdPostEscape = creatorIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{creatorId}", with: creatorIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "title": title?.encodeToJSON(),
            "titleStartsWith": titleStartsWith?.encodeToJSON(),
            "startYear": startYear?.encodeToJSON(),
            "modifiedSince": modifiedSince?.encodeToJSON(),
            "comics": comics?.encodeToJSON(),
            "stories": stories?.encodeToJSON(),
            "events": events?.encodeToJSON(),
            "characters": characters?.encodeToJSON(),
            "seriesType": seriesType?.encodeToJSON(),
            "contains": contains?.encodeToJSON(),
            "orderBy": orderBy?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SeriesDataWrapper>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Fetches lists of stories filtered by a creator id.
     
     - parameter creatorId: (path) The ID of the creator. 
     - parameter modifiedSince: (query) Return only stories which have been modified since the specified date. (optional)
     - parameter comics: (query) Return only stories contained in the specified comics (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only stories contained the specified series (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only stories which take place during the specified events (accepts a comma-separated list of ids). (optional)
     - parameter characters: (query) Return only stories which feature the specified characters (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: StoryDataWrapper
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func getCreatorStoryCollection(creatorId: Int, modifiedSince: Date? = nil, comics: [Int]? = nil, series: [Int]? = nil, events: [Int]? = nil, characters: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> StoryDataWrapper {
        return try await withCheckedThrowingContinuation { continuation in
            getCreatorStoryCollectionWithRequestBuilder(creatorId: creatorId, modifiedSince: modifiedSince, comics: comics, series: series, events: events, characters: characters, orderBy: orderBy, limit: limit, offset: offset).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Fetches lists of stories filtered by a creator id.
     - GET /v1/public/creators/{creatorId}/stories
     - Fetches lists of comic stories by a specific creator with optional filters. See notes on individual parameters below.
     - API Key:
       - type: apiKey apiKey 
       - name: ApiKey
     - parameter creatorId: (path) The ID of the creator. 
     - parameter modifiedSince: (query) Return only stories which have been modified since the specified date. (optional)
     - parameter comics: (query) Return only stories contained in the specified comics (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only stories contained the specified series (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only stories which take place during the specified events (accepts a comma-separated list of ids). (optional)
     - parameter characters: (query) Return only stories which feature the specified characters (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - returns: RequestBuilder<StoryDataWrapper> 
     */
    open class func getCreatorStoryCollectionWithRequestBuilder(creatorId: Int, modifiedSince: Date? = nil, comics: [Int]? = nil, series: [Int]? = nil, events: [Int]? = nil, characters: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<StoryDataWrapper> {
        var localVariablePath = "/v1/public/creators/{creatorId}/stories"
        let creatorIdPreEscape = "\(APIHelper.mapValueToPathItem(creatorId))"
        let creatorIdPostEscape = creatorIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{creatorId}", with: creatorIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "modifiedSince": modifiedSince?.encodeToJSON(),
            "comics": comics?.encodeToJSON(),
            "series": series?.encodeToJSON(),
            "events": events?.encodeToJSON(),
            "characters": characters?.encodeToJSON(),
            "orderBy": orderBy?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<StoryDataWrapper>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Fetches lists of creators.
     
     - parameter firstName: (query) Filter by creator first name (e.g. Brian). (optional)
     - parameter middleName: (query) Filter by creator middle name (e.g. Michael). (optional)
     - parameter lastName: (query) Filter by creator last name (e.g. Bendis). (optional)
     - parameter suffix: (query) Filter by suffix or honorific (e.g. Jr., Sr.). (optional)
     - parameter nameStartsWith: (query) Filter by creator names that match critera (e.g. B, St L). (optional)
     - parameter firstNameStartsWith: (query) Filter by creator first names that match critera (e.g. B, St L). (optional)
     - parameter middleNameStartsWith: (query) Filter by creator middle names that match critera (e.g. Mi). (optional)
     - parameter lastNameStartsWith: (query) Filter by creator last names that match critera (e.g. Ben). (optional)
     - parameter modifiedSince: (query) Return only creators which have been modified since the specified date. (optional)
     - parameter comics: (query) Return only creators who worked on in the specified comics (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only creators who worked on the specified series (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only creators who worked on comics that took place in the specified events (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only creators who worked on the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: CreatorDataWrapper
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func getCreators(firstName: String? = nil, middleName: String? = nil, lastName: String? = nil, suffix: String? = nil, nameStartsWith: String? = nil, firstNameStartsWith: String? = nil, middleNameStartsWith: String? = nil, lastNameStartsWith: String? = nil, modifiedSince: Date? = nil, comics: [Int]? = nil, series: [Int]? = nil, events: [Int]? = nil, stories: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> CreatorDataWrapper {
        return try await withCheckedThrowingContinuation { continuation in
            getCreatorsWithRequestBuilder(firstName: firstName, middleName: middleName, lastName: lastName, suffix: suffix, nameStartsWith: nameStartsWith, firstNameStartsWith: firstNameStartsWith, middleNameStartsWith: middleNameStartsWith, lastNameStartsWith: lastNameStartsWith, modifiedSince: modifiedSince, comics: comics, series: series, events: events, stories: stories, orderBy: orderBy, limit: limit, offset: offset).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Fetches lists of creators.
     - GET /v1/public/creators
     - Fetches lists of comic creators with optional filters. See notes on individual parameters below.
     - API Key:
       - type: apiKey apiKey 
       - name: ApiKey
     - parameter firstName: (query) Filter by creator first name (e.g. Brian). (optional)
     - parameter middleName: (query) Filter by creator middle name (e.g. Michael). (optional)
     - parameter lastName: (query) Filter by creator last name (e.g. Bendis). (optional)
     - parameter suffix: (query) Filter by suffix or honorific (e.g. Jr., Sr.). (optional)
     - parameter nameStartsWith: (query) Filter by creator names that match critera (e.g. B, St L). (optional)
     - parameter firstNameStartsWith: (query) Filter by creator first names that match critera (e.g. B, St L). (optional)
     - parameter middleNameStartsWith: (query) Filter by creator middle names that match critera (e.g. Mi). (optional)
     - parameter lastNameStartsWith: (query) Filter by creator last names that match critera (e.g. Ben). (optional)
     - parameter modifiedSince: (query) Return only creators which have been modified since the specified date. (optional)
     - parameter comics: (query) Return only creators who worked on in the specified comics (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only creators who worked on the specified series (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only creators who worked on comics that took place in the specified events (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only creators who worked on the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - returns: RequestBuilder<CreatorDataWrapper> 
     */
    open class func getCreatorsWithRequestBuilder(firstName: String? = nil, middleName: String? = nil, lastName: String? = nil, suffix: String? = nil, nameStartsWith: String? = nil, firstNameStartsWith: String? = nil, middleNameStartsWith: String? = nil, lastNameStartsWith: String? = nil, modifiedSince: Date? = nil, comics: [Int]? = nil, series: [Int]? = nil, events: [Int]? = nil, stories: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<CreatorDataWrapper> {
        let localVariablePath = "/v1/public/creators"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "firstName": firstName?.encodeToJSON(),
            "middleName": middleName?.encodeToJSON(),
            "lastName": lastName?.encodeToJSON(),
            "suffix": suffix?.encodeToJSON(),
            "nameStartsWith": nameStartsWith?.encodeToJSON(),
            "firstNameStartsWith": firstNameStartsWith?.encodeToJSON(),
            "middleNameStartsWith": middleNameStartsWith?.encodeToJSON(),
            "lastNameStartsWith": lastNameStartsWith?.encodeToJSON(),
            "modifiedSince": modifiedSince?.encodeToJSON(),
            "comics": comics?.encodeToJSON(),
            "series": series?.encodeToJSON(),
            "events": events?.encodeToJSON(),
            "stories": stories?.encodeToJSON(),
            "orderBy": orderBy?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreatorDataWrapper>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Fetches lists of creators filtered by a comic id.
     
     - parameter comicId: (path) The comic id. 
     - parameter firstName: (query) Filter by creator first name (e.g. brian). (optional)
     - parameter middleName: (query) Filter by creator middle name (e.g. Michael). (optional)
     - parameter lastName: (query) Filter by creator last name (e.g. Bendis). (optional)
     - parameter suffix: (query) Filter by suffix or honorific (e.g. Jr., Sr.). (optional)
     - parameter nameStartsWith: (query) Filter by creator names that match critera (e.g. B, St L). (optional)
     - parameter firstNameStartsWith: (query) Filter by creator first names that match critera (e.g. B, St L). (optional)
     - parameter middleNameStartsWith: (query) Filter by creator middle names that match critera (e.g. Mi). (optional)
     - parameter lastNameStartsWith: (query) Filter by creator last names that match critera (e.g. Ben). (optional)
     - parameter modifiedSince: (query) Return only creators which have been modified since the specified date. (optional)
     - parameter comics: (query) Return only creators who worked on in the specified comics (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only creators who worked on the specified series (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only creators who worked on the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: CreatorDataWrapper
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func getCreatorsFilteredByComic(comicId: Int, firstName: String? = nil, middleName: String? = nil, lastName: String? = nil, suffix: String? = nil, nameStartsWith: String? = nil, firstNameStartsWith: String? = nil, middleNameStartsWith: String? = nil, lastNameStartsWith: String? = nil, modifiedSince: Date? = nil, comics: [Int]? = nil, series: [Int]? = nil, stories: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> CreatorDataWrapper {
        return try await withCheckedThrowingContinuation { continuation in
            getCreatorsFilteredByComicWithRequestBuilder(comicId: comicId, firstName: firstName, middleName: middleName, lastName: lastName, suffix: suffix, nameStartsWith: nameStartsWith, firstNameStartsWith: firstNameStartsWith, middleNameStartsWith: middleNameStartsWith, lastNameStartsWith: lastNameStartsWith, modifiedSince: modifiedSince, comics: comics, series: series, stories: stories, orderBy: orderBy, limit: limit, offset: offset).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Fetches lists of creators filtered by a comic id.
     - GET /v1/public/comics/{comicId}/creators
     - Fetches lists of comic creators whose work appears in a specific comic, with optional filters. See notes on individual parameters below.
     - API Key:
       - type: apiKey apiKey 
       - name: ApiKey
     - parameter comicId: (path) The comic id. 
     - parameter firstName: (query) Filter by creator first name (e.g. brian). (optional)
     - parameter middleName: (query) Filter by creator middle name (e.g. Michael). (optional)
     - parameter lastName: (query) Filter by creator last name (e.g. Bendis). (optional)
     - parameter suffix: (query) Filter by suffix or honorific (e.g. Jr., Sr.). (optional)
     - parameter nameStartsWith: (query) Filter by creator names that match critera (e.g. B, St L). (optional)
     - parameter firstNameStartsWith: (query) Filter by creator first names that match critera (e.g. B, St L). (optional)
     - parameter middleNameStartsWith: (query) Filter by creator middle names that match critera (e.g. Mi). (optional)
     - parameter lastNameStartsWith: (query) Filter by creator last names that match critera (e.g. Ben). (optional)
     - parameter modifiedSince: (query) Return only creators which have been modified since the specified date. (optional)
     - parameter comics: (query) Return only creators who worked on in the specified comics (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only creators who worked on the specified series (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only creators who worked on the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - returns: RequestBuilder<CreatorDataWrapper> 
     */
    open class func getCreatorsFilteredByComicWithRequestBuilder(comicId: Int, firstName: String? = nil, middleName: String? = nil, lastName: String? = nil, suffix: String? = nil, nameStartsWith: String? = nil, firstNameStartsWith: String? = nil, middleNameStartsWith: String? = nil, lastNameStartsWith: String? = nil, modifiedSince: Date? = nil, comics: [Int]? = nil, series: [Int]? = nil, stories: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<CreatorDataWrapper> {
        var localVariablePath = "/v1/public/comics/{comicId}/creators"
        let comicIdPreEscape = "\(APIHelper.mapValueToPathItem(comicId))"
        let comicIdPostEscape = comicIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{comicId}", with: comicIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "firstName": firstName?.encodeToJSON(),
            "middleName": middleName?.encodeToJSON(),
            "lastName": lastName?.encodeToJSON(),
            "suffix": suffix?.encodeToJSON(),
            "nameStartsWith": nameStartsWith?.encodeToJSON(),
            "firstNameStartsWith": firstNameStartsWith?.encodeToJSON(),
            "middleNameStartsWith": middleNameStartsWith?.encodeToJSON(),
            "lastNameStartsWith": lastNameStartsWith?.encodeToJSON(),
            "modifiedSince": modifiedSince?.encodeToJSON(),
            "comics": comics?.encodeToJSON(),
            "series": series?.encodeToJSON(),
            "stories": stories?.encodeToJSON(),
            "orderBy": orderBy?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreatorDataWrapper>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Fetches lists of creators filtered by a story id.
     
     - parameter storyId: (path) The story ID. 
     - parameter firstName: (query) Filter by creator first name (e.g. brian). (optional)
     - parameter middleName: (query) Filter by creator middle name (e.g. Michael). (optional)
     - parameter lastName: (query) Filter by creator last name (e.g. Bendis). (optional)
     - parameter suffix: (query) Filter by suffix or honorific (e.g. Jr., Sr.). (optional)
     - parameter nameStartsWith: (query) Filter by creator names that match critera (e.g. B, St L). (optional)
     - parameter firstNameStartsWith: (query) Filter by creator first names that match critera (e.g. B, St L). (optional)
     - parameter middleNameStartsWith: (query) Filter by creator middle names that match critera (e.g. Mi). (optional)
     - parameter lastNameStartsWith: (query) Filter by creator last names that match critera (e.g. Ben). (optional)
     - parameter modifiedSince: (query) Return only creators which have been modified since the specified date. (optional)
     - parameter comics: (query) Return only creators who worked on in the specified comics (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only creators who worked on the specified series (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only creators who worked on comics that took place in the specified events (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: CreatorDataWrapper
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func getCreatorsFilteredByStory(storyId: Int, firstName: String? = nil, middleName: String? = nil, lastName: String? = nil, suffix: String? = nil, nameStartsWith: String? = nil, firstNameStartsWith: String? = nil, middleNameStartsWith: String? = nil, lastNameStartsWith: String? = nil, modifiedSince: Date? = nil, comics: [Int]? = nil, series: [Int]? = nil, events: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> CreatorDataWrapper {
        return try await withCheckedThrowingContinuation { continuation in
            getCreatorsFilteredByStoryWithRequestBuilder(storyId: storyId, firstName: firstName, middleName: middleName, lastName: lastName, suffix: suffix, nameStartsWith: nameStartsWith, firstNameStartsWith: firstNameStartsWith, middleNameStartsWith: middleNameStartsWith, lastNameStartsWith: lastNameStartsWith, modifiedSince: modifiedSince, comics: comics, series: series, events: events, orderBy: orderBy, limit: limit, offset: offset).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Fetches lists of creators filtered by a story id.
     - GET /v1/public/stories/{storyId}/creators
     - Fetches lists of comic creators whose work appears in a specific story, with optional filters. See notes on individual parameters below.
     - API Key:
       - type: apiKey apiKey 
       - name: ApiKey
     - parameter storyId: (path) The story ID. 
     - parameter firstName: (query) Filter by creator first name (e.g. brian). (optional)
     - parameter middleName: (query) Filter by creator middle name (e.g. Michael). (optional)
     - parameter lastName: (query) Filter by creator last name (e.g. Bendis). (optional)
     - parameter suffix: (query) Filter by suffix or honorific (e.g. Jr., Sr.). (optional)
     - parameter nameStartsWith: (query) Filter by creator names that match critera (e.g. B, St L). (optional)
     - parameter firstNameStartsWith: (query) Filter by creator first names that match critera (e.g. B, St L). (optional)
     - parameter middleNameStartsWith: (query) Filter by creator middle names that match critera (e.g. Mi). (optional)
     - parameter lastNameStartsWith: (query) Filter by creator last names that match critera (e.g. Ben). (optional)
     - parameter modifiedSince: (query) Return only creators which have been modified since the specified date. (optional)
     - parameter comics: (query) Return only creators who worked on in the specified comics (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only creators who worked on the specified series (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only creators who worked on comics that took place in the specified events (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - returns: RequestBuilder<CreatorDataWrapper> 
     */
    open class func getCreatorsFilteredByStoryWithRequestBuilder(storyId: Int, firstName: String? = nil, middleName: String? = nil, lastName: String? = nil, suffix: String? = nil, nameStartsWith: String? = nil, firstNameStartsWith: String? = nil, middleNameStartsWith: String? = nil, lastNameStartsWith: String? = nil, modifiedSince: Date? = nil, comics: [Int]? = nil, series: [Int]? = nil, events: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<CreatorDataWrapper> {
        var localVariablePath = "/v1/public/stories/{storyId}/creators"
        let storyIdPreEscape = "\(APIHelper.mapValueToPathItem(storyId))"
        let storyIdPostEscape = storyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{storyId}", with: storyIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "firstName": firstName?.encodeToJSON(),
            "middleName": middleName?.encodeToJSON(),
            "lastName": lastName?.encodeToJSON(),
            "suffix": suffix?.encodeToJSON(),
            "nameStartsWith": nameStartsWith?.encodeToJSON(),
            "firstNameStartsWith": firstNameStartsWith?.encodeToJSON(),
            "middleNameStartsWith": middleNameStartsWith?.encodeToJSON(),
            "lastNameStartsWith": lastNameStartsWith?.encodeToJSON(),
            "modifiedSince": modifiedSince?.encodeToJSON(),
            "comics": comics?.encodeToJSON(),
            "series": series?.encodeToJSON(),
            "events": events?.encodeToJSON(),
            "orderBy": orderBy?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreatorDataWrapper>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Fetches lists of characters filtered by an event id.
     
     - parameter eventId: (path) The event ID 
     - parameter name: (query) Return only characters matching the specified full character name (e.g. Spider-Man). (optional)
     - parameter nameStartsWith: (query) Return characters with names that begin with the specified string (e.g. Sp). (optional)
     - parameter modifiedSince: (query) Return only characters which have been modified since the specified date. (optional)
     - parameter comics: (query) Return only characters which appear in the specified comics (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only characters which appear the specified series (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only characters which appear the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: CharacterDataWrapper
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func getEventCharacterCollection(eventId: Int, name: String? = nil, nameStartsWith: String? = nil, modifiedSince: Date? = nil, comics: [Int]? = nil, series: [Int]? = nil, stories: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> CharacterDataWrapper {
        return try await withCheckedThrowingContinuation { continuation in
            getEventCharacterCollectionWithRequestBuilder(eventId: eventId, name: name, nameStartsWith: nameStartsWith, modifiedSince: modifiedSince, comics: comics, series: series, stories: stories, orderBy: orderBy, limit: limit, offset: offset).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Fetches lists of characters filtered by an event id.
     - GET /v1/public/events/{eventId}/characters
     - Fetches lists of characters which appear in a specific event, with optional filters. See notes on individual parameters below.
     - API Key:
       - type: apiKey apiKey 
       - name: ApiKey
     - parameter eventId: (path) The event ID 
     - parameter name: (query) Return only characters matching the specified full character name (e.g. Spider-Man). (optional)
     - parameter nameStartsWith: (query) Return characters with names that begin with the specified string (e.g. Sp). (optional)
     - parameter modifiedSince: (query) Return only characters which have been modified since the specified date. (optional)
     - parameter comics: (query) Return only characters which appear in the specified comics (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only characters which appear the specified series (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only characters which appear the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - returns: RequestBuilder<CharacterDataWrapper> 
     */
    open class func getEventCharacterCollectionWithRequestBuilder(eventId: Int, name: String? = nil, nameStartsWith: String? = nil, modifiedSince: Date? = nil, comics: [Int]? = nil, series: [Int]? = nil, stories: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<CharacterDataWrapper> {
        var localVariablePath = "/v1/public/events/{eventId}/characters"
        let eventIdPreEscape = "\(APIHelper.mapValueToPathItem(eventId))"
        let eventIdPostEscape = eventIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{eventId}", with: eventIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": name?.encodeToJSON(),
            "nameStartsWith": nameStartsWith?.encodeToJSON(),
            "modifiedSince": modifiedSince?.encodeToJSON(),
            "comics": comics?.encodeToJSON(),
            "series": series?.encodeToJSON(),
            "stories": stories?.encodeToJSON(),
            "orderBy": orderBy?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CharacterDataWrapper>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Fetches a single event by id.
     
     - parameter eventId: (path) A single event. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: EventDataWrapper
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func getEventIndividual(eventId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> EventDataWrapper {
        return try await withCheckedThrowingContinuation { continuation in
            getEventIndividualWithRequestBuilder(eventId: eventId).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Fetches a single event by id.
     - GET /v1/public/events/{eventId}
     - This method fetches a single event resource.  It is the canonical URI for any event resource provided by the API.
     - API Key:
       - type: apiKey apiKey 
       - name: ApiKey
     - parameter eventId: (path) A single event. 
     - returns: RequestBuilder<EventDataWrapper> 
     */
    open class func getEventIndividualWithRequestBuilder(eventId: Int) -> RequestBuilder<EventDataWrapper> {
        var localVariablePath = "/v1/public/events/{eventId}"
        let eventIdPreEscape = "\(APIHelper.mapValueToPathItem(eventId))"
        let eventIdPostEscape = eventIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{eventId}", with: eventIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EventDataWrapper>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Fetches lists of series filtered by an event id.
     
     - parameter eventId: (path) The event ID. 
     - parameter title: (query) Filter by series title. (optional)
     - parameter titleStartsWith: (query) Return series with titles that begin with the specified string (e.g. Sp). (optional)
     - parameter startYear: (query) Return only series matching the specified start year. (optional)
     - parameter modifiedSince: (query) Return only series which have been modified since the specified date. (optional)
     - parameter comics: (query) Return only series which contain the specified comics (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only series which contain the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter creators: (query) Return only series which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     - parameter characters: (query) Return only series which feature the specified characters (accepts a comma-separated list of ids). (optional)
     - parameter seriesType: (query) Filter the series by publication frequency type. (optional)
     - parameter contains: (query) Return only series containing one or more comics with the specified format. (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: SeriesDataWrapper
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func getEventSeriesCollection(eventId: Int, title: String? = nil, titleStartsWith: String? = nil, startYear: Int? = nil, modifiedSince: Date? = nil, comics: [Int]? = nil, stories: [Int]? = nil, creators: [Int]? = nil, characters: [Int]? = nil, seriesType: String? = nil, contains: [String]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> SeriesDataWrapper {
        return try await withCheckedThrowingContinuation { continuation in
            getEventSeriesCollectionWithRequestBuilder(eventId: eventId, title: title, titleStartsWith: titleStartsWith, startYear: startYear, modifiedSince: modifiedSince, comics: comics, stories: stories, creators: creators, characters: characters, seriesType: seriesType, contains: contains, orderBy: orderBy, limit: limit, offset: offset).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Fetches lists of series filtered by an event id.
     - GET /v1/public/events/{eventId}/series
     - Fetches lists of comic series in which a specific event takes place, with optional filters. See notes on individual parameters below.
     - API Key:
       - type: apiKey apiKey 
       - name: ApiKey
     - parameter eventId: (path) The event ID. 
     - parameter title: (query) Filter by series title. (optional)
     - parameter titleStartsWith: (query) Return series with titles that begin with the specified string (e.g. Sp). (optional)
     - parameter startYear: (query) Return only series matching the specified start year. (optional)
     - parameter modifiedSince: (query) Return only series which have been modified since the specified date. (optional)
     - parameter comics: (query) Return only series which contain the specified comics (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only series which contain the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter creators: (query) Return only series which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     - parameter characters: (query) Return only series which feature the specified characters (accepts a comma-separated list of ids). (optional)
     - parameter seriesType: (query) Filter the series by publication frequency type. (optional)
     - parameter contains: (query) Return only series containing one or more comics with the specified format. (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - returns: RequestBuilder<SeriesDataWrapper> 
     */
    open class func getEventSeriesCollectionWithRequestBuilder(eventId: Int, title: String? = nil, titleStartsWith: String? = nil, startYear: Int? = nil, modifiedSince: Date? = nil, comics: [Int]? = nil, stories: [Int]? = nil, creators: [Int]? = nil, characters: [Int]? = nil, seriesType: String? = nil, contains: [String]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<SeriesDataWrapper> {
        var localVariablePath = "/v1/public/events/{eventId}/series"
        let eventIdPreEscape = "\(APIHelper.mapValueToPathItem(eventId))"
        let eventIdPostEscape = eventIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{eventId}", with: eventIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "title": title?.encodeToJSON(),
            "titleStartsWith": titleStartsWith?.encodeToJSON(),
            "startYear": startYear?.encodeToJSON(),
            "modifiedSince": modifiedSince?.encodeToJSON(),
            "comics": comics?.encodeToJSON(),
            "stories": stories?.encodeToJSON(),
            "creators": creators?.encodeToJSON(),
            "characters": characters?.encodeToJSON(),
            "seriesType": seriesType?.encodeToJSON(),
            "contains": contains?.encodeToJSON(),
            "orderBy": orderBy?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SeriesDataWrapper>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Fetches lists of stories filtered by an event id.
     
     - parameter eventId: (path) The ID of the event. 
     - parameter modifiedSince: (query) Return only stories which have been modified since the specified date. (optional)
     - parameter comics: (query) Return only stories contained in the specified (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only stories contained the specified series (accepts a comma-separated list of ids). (optional)
     - parameter creators: (query) Return only stories which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     - parameter characters: (query) Return only stories which feature the specified characters (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: StoryDataWrapper
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func getEventStoryCollection(eventId: Int, modifiedSince: Date? = nil, comics: [Int]? = nil, series: [Int]? = nil, creators: [Int]? = nil, characters: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> StoryDataWrapper {
        return try await withCheckedThrowingContinuation { continuation in
            getEventStoryCollectionWithRequestBuilder(eventId: eventId, modifiedSince: modifiedSince, comics: comics, series: series, creators: creators, characters: characters, orderBy: orderBy, limit: limit, offset: offset).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Fetches lists of stories filtered by an event id.
     - GET /v1/public/events/{eventId}/stories
     - Fetches lists of comic stories from a specific event, with optional filters. See notes on individual parameters below.
     - API Key:
       - type: apiKey apiKey 
       - name: ApiKey
     - parameter eventId: (path) The ID of the event. 
     - parameter modifiedSince: (query) Return only stories which have been modified since the specified date. (optional)
     - parameter comics: (query) Return only stories contained in the specified (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only stories contained the specified series (accepts a comma-separated list of ids). (optional)
     - parameter creators: (query) Return only stories which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     - parameter characters: (query) Return only stories which feature the specified characters (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - returns: RequestBuilder<StoryDataWrapper> 
     */
    open class func getEventStoryCollectionWithRequestBuilder(eventId: Int, modifiedSince: Date? = nil, comics: [Int]? = nil, series: [Int]? = nil, creators: [Int]? = nil, characters: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<StoryDataWrapper> {
        var localVariablePath = "/v1/public/events/{eventId}/stories"
        let eventIdPreEscape = "\(APIHelper.mapValueToPathItem(eventId))"
        let eventIdPostEscape = eventIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{eventId}", with: eventIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "modifiedSince": modifiedSince?.encodeToJSON(),
            "comics": comics?.encodeToJSON(),
            "series": series?.encodeToJSON(),
            "creators": creators?.encodeToJSON(),
            "characters": characters?.encodeToJSON(),
            "orderBy": orderBy?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<StoryDataWrapper>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Fetches lists of events.
     
     - parameter name: (query) Return only events which match the specified name. (optional)
     - parameter nameStartsWith: (query) Return events with names that begin with the specified string (e.g. Sp). (optional)
     - parameter modifiedSince: (query) Return only events which have been modified since the specified date. (optional)
     - parameter creators: (query) Return only events which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     - parameter characters: (query) Return only events which feature the specified characters (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only events which are part of the specified series (accepts a comma-separated list of ids). (optional)
     - parameter comics: (query) Return only events which take place in the specified comics (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only events which take place in the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: EventDataWrapper
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func getEventsCollection(name: String? = nil, nameStartsWith: String? = nil, modifiedSince: Date? = nil, creators: [Int]? = nil, characters: [Int]? = nil, series: [Int]? = nil, comics: [Int]? = nil, stories: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> EventDataWrapper {
        return try await withCheckedThrowingContinuation { continuation in
            getEventsCollectionWithRequestBuilder(name: name, nameStartsWith: nameStartsWith, modifiedSince: modifiedSince, creators: creators, characters: characters, series: series, comics: comics, stories: stories, orderBy: orderBy, limit: limit, offset: offset).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Fetches lists of events.
     - GET /v1/public/events
     - Fetches lists of events with optional filters. See notes on individual parameters below.
     - API Key:
       - type: apiKey apiKey 
       - name: ApiKey
     - parameter name: (query) Return only events which match the specified name. (optional)
     - parameter nameStartsWith: (query) Return events with names that begin with the specified string (e.g. Sp). (optional)
     - parameter modifiedSince: (query) Return only events which have been modified since the specified date. (optional)
     - parameter creators: (query) Return only events which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     - parameter characters: (query) Return only events which feature the specified characters (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only events which are part of the specified series (accepts a comma-separated list of ids). (optional)
     - parameter comics: (query) Return only events which take place in the specified comics (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only events which take place in the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - returns: RequestBuilder<EventDataWrapper> 
     */
    open class func getEventsCollectionWithRequestBuilder(name: String? = nil, nameStartsWith: String? = nil, modifiedSince: Date? = nil, creators: [Int]? = nil, characters: [Int]? = nil, series: [Int]? = nil, comics: [Int]? = nil, stories: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<EventDataWrapper> {
        let localVariablePath = "/v1/public/events"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": name?.encodeToJSON(),
            "nameStartsWith": nameStartsWith?.encodeToJSON(),
            "modifiedSince": modifiedSince?.encodeToJSON(),
            "creators": creators?.encodeToJSON(),
            "characters": characters?.encodeToJSON(),
            "series": series?.encodeToJSON(),
            "comics": comics?.encodeToJSON(),
            "stories": stories?.encodeToJSON(),
            "orderBy": orderBy?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EventDataWrapper>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Fetches lists of creators filtered by an event id.
     
     - parameter eventId: (path) The event ID. 
     - parameter firstName: (query) Filter by creator first name (e.g. brian). (optional)
     - parameter middleName: (query) Filter by creator middle name (e.g. Michael). (optional)
     - parameter lastName: (query) Filter by creator last name (e.g. Bendis). (optional)
     - parameter suffix: (query) Filter by suffix or honorific (e.g. Jr., Sr.). (optional)
     - parameter nameStartsWith: (query) Filter by creator names that match critera (e.g. B, St L). (optional)
     - parameter firstNameStartsWith: (query) Filter by creator first names that match critera (e.g. B, St L). (optional)
     - parameter middleNameStartsWith: (query) Filter by creator middle names that match critera (e.g. Mi). (optional)
     - parameter lastNameStartsWith: (query) Filter by creator last names that match critera (e.g. Ben). (optional)
     - parameter modifiedSince: (query) Return only creators which have been modified since the specified date. (optional)
     - parameter comics: (query) Return only creators who worked on in the specified comics (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only creators who worked on the specified series (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only creators who worked on the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: CreatorDataWrapper
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func getEventsCreatorCollection(eventId: Int, firstName: String? = nil, middleName: String? = nil, lastName: String? = nil, suffix: String? = nil, nameStartsWith: String? = nil, firstNameStartsWith: String? = nil, middleNameStartsWith: String? = nil, lastNameStartsWith: String? = nil, modifiedSince: Date? = nil, comics: [Int]? = nil, series: [Int]? = nil, stories: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> CreatorDataWrapper {
        return try await withCheckedThrowingContinuation { continuation in
            getEventsCreatorCollectionWithRequestBuilder(eventId: eventId, firstName: firstName, middleName: middleName, lastName: lastName, suffix: suffix, nameStartsWith: nameStartsWith, firstNameStartsWith: firstNameStartsWith, middleNameStartsWith: middleNameStartsWith, lastNameStartsWith: lastNameStartsWith, modifiedSince: modifiedSince, comics: comics, series: series, stories: stories, orderBy: orderBy, limit: limit, offset: offset).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Fetches lists of creators filtered by an event id.
     - GET /v1/public/events/{eventId}/creators
     - Fetches lists of comic creators whose work appears in a specific event, with optional filters. See notes on individual parameters below.
     - API Key:
       - type: apiKey apiKey 
       - name: ApiKey
     - parameter eventId: (path) The event ID. 
     - parameter firstName: (query) Filter by creator first name (e.g. brian). (optional)
     - parameter middleName: (query) Filter by creator middle name (e.g. Michael). (optional)
     - parameter lastName: (query) Filter by creator last name (e.g. Bendis). (optional)
     - parameter suffix: (query) Filter by suffix or honorific (e.g. Jr., Sr.). (optional)
     - parameter nameStartsWith: (query) Filter by creator names that match critera (e.g. B, St L). (optional)
     - parameter firstNameStartsWith: (query) Filter by creator first names that match critera (e.g. B, St L). (optional)
     - parameter middleNameStartsWith: (query) Filter by creator middle names that match critera (e.g. Mi). (optional)
     - parameter lastNameStartsWith: (query) Filter by creator last names that match critera (e.g. Ben). (optional)
     - parameter modifiedSince: (query) Return only creators which have been modified since the specified date. (optional)
     - parameter comics: (query) Return only creators who worked on in the specified comics (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only creators who worked on the specified series (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only creators who worked on the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - returns: RequestBuilder<CreatorDataWrapper> 
     */
    open class func getEventsCreatorCollectionWithRequestBuilder(eventId: Int, firstName: String? = nil, middleName: String? = nil, lastName: String? = nil, suffix: String? = nil, nameStartsWith: String? = nil, firstNameStartsWith: String? = nil, middleNameStartsWith: String? = nil, lastNameStartsWith: String? = nil, modifiedSince: Date? = nil, comics: [Int]? = nil, series: [Int]? = nil, stories: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<CreatorDataWrapper> {
        var localVariablePath = "/v1/public/events/{eventId}/creators"
        let eventIdPreEscape = "\(APIHelper.mapValueToPathItem(eventId))"
        let eventIdPostEscape = eventIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{eventId}", with: eventIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "firstName": firstName?.encodeToJSON(),
            "middleName": middleName?.encodeToJSON(),
            "lastName": lastName?.encodeToJSON(),
            "suffix": suffix?.encodeToJSON(),
            "nameStartsWith": nameStartsWith?.encodeToJSON(),
            "firstNameStartsWith": firstNameStartsWith?.encodeToJSON(),
            "middleNameStartsWith": middleNameStartsWith?.encodeToJSON(),
            "lastNameStartsWith": lastNameStartsWith?.encodeToJSON(),
            "modifiedSince": modifiedSince?.encodeToJSON(),
            "comics": comics?.encodeToJSON(),
            "series": series?.encodeToJSON(),
            "stories": stories?.encodeToJSON(),
            "orderBy": orderBy?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreatorDataWrapper>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Fetches lists of events filtered by a series id.
     
     - parameter seriesId: (path) The series ID. 
     - parameter name: (query) Filter the event list by name. (optional)
     - parameter nameStartsWith: (query) Return events with names that begin with the specified string (e.g. Sp). (optional)
     - parameter modifiedSince: (query) Return only events which have been modified since the specified date. (optional)
     - parameter creators: (query) Return only events which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     - parameter characters: (query) Return only events which feature the specified characters (accepts a comma-separated list of ids). (optional)
     - parameter comics: (query) Return only events which take place in the specified comics (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only events which contain the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: EventDataWrapper
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func getEventsFilteredBySeries(seriesId: Int, name: String? = nil, nameStartsWith: String? = nil, modifiedSince: Date? = nil, creators: [Int]? = nil, characters: [Int]? = nil, comics: [Int]? = nil, stories: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> EventDataWrapper {
        return try await withCheckedThrowingContinuation { continuation in
            getEventsFilteredBySeriesWithRequestBuilder(seriesId: seriesId, name: name, nameStartsWith: nameStartsWith, modifiedSince: modifiedSince, creators: creators, characters: characters, comics: comics, stories: stories, orderBy: orderBy, limit: limit, offset: offset).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Fetches lists of events filtered by a series id.
     - GET /v1/public/series/{seriesId}/events
     - Fetches lists of events which occur in a specific series, with optional filters. See notes on individual parameters below.
     - API Key:
       - type: apiKey apiKey 
       - name: ApiKey
     - parameter seriesId: (path) The series ID. 
     - parameter name: (query) Filter the event list by name. (optional)
     - parameter nameStartsWith: (query) Return events with names that begin with the specified string (e.g. Sp). (optional)
     - parameter modifiedSince: (query) Return only events which have been modified since the specified date. (optional)
     - parameter creators: (query) Return only events which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     - parameter characters: (query) Return only events which feature the specified characters (accepts a comma-separated list of ids). (optional)
     - parameter comics: (query) Return only events which take place in the specified comics (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only events which contain the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - returns: RequestBuilder<EventDataWrapper> 
     */
    open class func getEventsFilteredBySeriesWithRequestBuilder(seriesId: Int, name: String? = nil, nameStartsWith: String? = nil, modifiedSince: Date? = nil, creators: [Int]? = nil, characters: [Int]? = nil, comics: [Int]? = nil, stories: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<EventDataWrapper> {
        var localVariablePath = "/v1/public/series/{seriesId}/events"
        let seriesIdPreEscape = "\(APIHelper.mapValueToPathItem(seriesId))"
        let seriesIdPostEscape = seriesIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{seriesId}", with: seriesIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": name?.encodeToJSON(),
            "nameStartsWith": nameStartsWith?.encodeToJSON(),
            "modifiedSince": modifiedSince?.encodeToJSON(),
            "creators": creators?.encodeToJSON(),
            "characters": characters?.encodeToJSON(),
            "comics": comics?.encodeToJSON(),
            "stories": stories?.encodeToJSON(),
            "orderBy": orderBy?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EventDataWrapper>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Fetches lists of events filtered by a story id.
     
     - parameter storyId: (path) The story ID. 
     - parameter name: (query) Filter the event list by name. (optional)
     - parameter nameStartsWith: (query) Return events with names that begin with the specified string (e.g. Sp). (optional)
     - parameter modifiedSince: (query) Return only events which have been modified since the specified date. (optional)
     - parameter creators: (query) Return only events which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     - parameter characters: (query) Return only events which feature the specified characters (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only events which are part of the specified series (accepts a comma-separated list of ids). (optional)
     - parameter comics: (query) Return only events which take place in the specified comics (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: EventDataWrapper
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func getEventsFilteredByStory(storyId: Int, name: String? = nil, nameStartsWith: String? = nil, modifiedSince: Date? = nil, creators: [Int]? = nil, characters: [Int]? = nil, series: [Int]? = nil, comics: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> EventDataWrapper {
        return try await withCheckedThrowingContinuation { continuation in
            getEventsFilteredByStoryWithRequestBuilder(storyId: storyId, name: name, nameStartsWith: nameStartsWith, modifiedSince: modifiedSince, creators: creators, characters: characters, series: series, comics: comics, orderBy: orderBy, limit: limit, offset: offset).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Fetches lists of events filtered by a story id.
     - GET /v1/public/stories/{storyId}/events
     - Fetches lists of events in which a specific story appears, with optional filters. See notes on individual parameters below.
     - API Key:
       - type: apiKey apiKey 
       - name: ApiKey
     - parameter storyId: (path) The story ID. 
     - parameter name: (query) Filter the event list by name. (optional)
     - parameter nameStartsWith: (query) Return events with names that begin with the specified string (e.g. Sp). (optional)
     - parameter modifiedSince: (query) Return only events which have been modified since the specified date. (optional)
     - parameter creators: (query) Return only events which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     - parameter characters: (query) Return only events which feature the specified characters (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only events which are part of the specified series (accepts a comma-separated list of ids). (optional)
     - parameter comics: (query) Return only events which take place in the specified comics (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - returns: RequestBuilder<EventDataWrapper> 
     */
    open class func getEventsFilteredByStoryWithRequestBuilder(storyId: Int, name: String? = nil, nameStartsWith: String? = nil, modifiedSince: Date? = nil, creators: [Int]? = nil, characters: [Int]? = nil, series: [Int]? = nil, comics: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<EventDataWrapper> {
        var localVariablePath = "/v1/public/stories/{storyId}/events"
        let storyIdPreEscape = "\(APIHelper.mapValueToPathItem(storyId))"
        let storyIdPostEscape = storyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{storyId}", with: storyIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": name?.encodeToJSON(),
            "nameStartsWith": nameStartsWith?.encodeToJSON(),
            "modifiedSince": modifiedSince?.encodeToJSON(),
            "creators": creators?.encodeToJSON(),
            "characters": characters?.encodeToJSON(),
            "series": series?.encodeToJSON(),
            "comics": comics?.encodeToJSON(),
            "orderBy": orderBy?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EventDataWrapper>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Fetches lists of events filtered by a comic id.
     
     - parameter comicId: (path) The comic ID. 
     - parameter name: (query) Filter the event list by name. (optional)
     - parameter nameStartsWith: (query) Return events with names that begin with the specified string (e.g. Sp). (optional)
     - parameter modifiedSince: (query) Return only events which have been modified since the specified date. (optional)
     - parameter creators: (query) Return only events which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     - parameter characters: (query) Return only events which feature the specified characters (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only events which are part of the specified series (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only events which contain the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: EventDataWrapper
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func getIssueEventsCollection(comicId: Int, name: String? = nil, nameStartsWith: String? = nil, modifiedSince: Date? = nil, creators: [Int]? = nil, characters: [Int]? = nil, series: [Int]? = nil, stories: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> EventDataWrapper {
        return try await withCheckedThrowingContinuation { continuation in
            getIssueEventsCollectionWithRequestBuilder(comicId: comicId, name: name, nameStartsWith: nameStartsWith, modifiedSince: modifiedSince, creators: creators, characters: characters, series: series, stories: stories, orderBy: orderBy, limit: limit, offset: offset).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Fetches lists of events filtered by a comic id.
     - GET /v1/public/comics/{comicId}/events
     - Fetches lists of events in which a specific comic appears, with optional filters. See notes on individual parameters below.
     - API Key:
       - type: apiKey apiKey 
       - name: ApiKey
     - parameter comicId: (path) The comic ID. 
     - parameter name: (query) Filter the event list by name. (optional)
     - parameter nameStartsWith: (query) Return events with names that begin with the specified string (e.g. Sp). (optional)
     - parameter modifiedSince: (query) Return only events which have been modified since the specified date. (optional)
     - parameter creators: (query) Return only events which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     - parameter characters: (query) Return only events which feature the specified characters (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only events which are part of the specified series (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only events which contain the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - returns: RequestBuilder<EventDataWrapper> 
     */
    open class func getIssueEventsCollectionWithRequestBuilder(comicId: Int, name: String? = nil, nameStartsWith: String? = nil, modifiedSince: Date? = nil, creators: [Int]? = nil, characters: [Int]? = nil, series: [Int]? = nil, stories: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<EventDataWrapper> {
        var localVariablePath = "/v1/public/comics/{comicId}/events"
        let comicIdPreEscape = "\(APIHelper.mapValueToPathItem(comicId))"
        let comicIdPostEscape = comicIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{comicId}", with: comicIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": name?.encodeToJSON(),
            "nameStartsWith": nameStartsWith?.encodeToJSON(),
            "modifiedSince": modifiedSince?.encodeToJSON(),
            "creators": creators?.encodeToJSON(),
            "characters": characters?.encodeToJSON(),
            "series": series?.encodeToJSON(),
            "stories": stories?.encodeToJSON(),
            "orderBy": orderBy?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EventDataWrapper>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Fetches lists of characters filtered by a series id.
     
     - parameter seriesId: (path) The series id. 
     - parameter name: (query) Return only characters matching the specified full character name (e.g. Spider-Man). (optional)
     - parameter nameStartsWith: (query) Return characters with names that begin with the specified string (e.g. Sp). (optional)
     - parameter modifiedSince: (query) Return only characters which have been modified since the specified date. (optional)
     - parameter comics: (query) Return only characters which appear in the specified comics (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only characters which appear comics that took place in the specified events (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only characters which appear the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: CharacterDataWrapper
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func getSeriesCharacterWrapper(seriesId: Int, name: String? = nil, nameStartsWith: String? = nil, modifiedSince: Date? = nil, comics: [Int]? = nil, events: [Int]? = nil, stories: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> CharacterDataWrapper {
        return try await withCheckedThrowingContinuation { continuation in
            getSeriesCharacterWrapperWithRequestBuilder(seriesId: seriesId, name: name, nameStartsWith: nameStartsWith, modifiedSince: modifiedSince, comics: comics, events: events, stories: stories, orderBy: orderBy, limit: limit, offset: offset).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Fetches lists of characters filtered by a series id.
     - GET /v1/public/series/{seriesId}/characters
     - Fetches lists of characters which appear in specific series, with optional filters. See notes on individual parameters below.
     - API Key:
       - type: apiKey apiKey 
       - name: ApiKey
     - parameter seriesId: (path) The series id. 
     - parameter name: (query) Return only characters matching the specified full character name (e.g. Spider-Man). (optional)
     - parameter nameStartsWith: (query) Return characters with names that begin with the specified string (e.g. Sp). (optional)
     - parameter modifiedSince: (query) Return only characters which have been modified since the specified date. (optional)
     - parameter comics: (query) Return only characters which appear in the specified comics (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only characters which appear comics that took place in the specified events (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only characters which appear the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - returns: RequestBuilder<CharacterDataWrapper> 
     */
    open class func getSeriesCharacterWrapperWithRequestBuilder(seriesId: Int, name: String? = nil, nameStartsWith: String? = nil, modifiedSince: Date? = nil, comics: [Int]? = nil, events: [Int]? = nil, stories: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<CharacterDataWrapper> {
        var localVariablePath = "/v1/public/series/{seriesId}/characters"
        let seriesIdPreEscape = "\(APIHelper.mapValueToPathItem(seriesId))"
        let seriesIdPostEscape = seriesIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{seriesId}", with: seriesIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": name?.encodeToJSON(),
            "nameStartsWith": nameStartsWith?.encodeToJSON(),
            "modifiedSince": modifiedSince?.encodeToJSON(),
            "comics": comics?.encodeToJSON(),
            "events": events?.encodeToJSON(),
            "stories": stories?.encodeToJSON(),
            "orderBy": orderBy?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CharacterDataWrapper>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Fetches lists of series.
     
     - parameter title: (query) Return only series matching the specified title. (optional)
     - parameter titleStartsWith: (query) Return series with titles that begin with the specified string (e.g. Sp). (optional)
     - parameter startYear: (query) Return only series matching the specified start year. (optional)
     - parameter modifiedSince: (query) Return only series which have been modified since the specified date. (optional)
     - parameter comics: (query) Return only series which contain the specified comics (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only series which contain the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only series which have comics that take place during the specified events (accepts a comma-separated list of ids). (optional)
     - parameter creators: (query) Return only series which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     - parameter characters: (query) Return only series which feature the specified characters (accepts a comma-separated list of ids). (optional)
     - parameter seriesType: (query) Filter the series by publication frequency type. (optional)
     - parameter contains: (query) Return only series containing one or more comics with the specified format. (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: SeriesDataWrapper
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func getSeriesCollection(title: String? = nil, titleStartsWith: String? = nil, startYear: Int? = nil, modifiedSince: Date? = nil, comics: [Int]? = nil, stories: [Int]? = nil, events: [Int]? = nil, creators: [Int]? = nil, characters: [Int]? = nil, seriesType: String? = nil, contains: [String]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> SeriesDataWrapper {
        return try await withCheckedThrowingContinuation { continuation in
            getSeriesCollectionWithRequestBuilder(title: title, titleStartsWith: titleStartsWith, startYear: startYear, modifiedSince: modifiedSince, comics: comics, stories: stories, events: events, creators: creators, characters: characters, seriesType: seriesType, contains: contains, orderBy: orderBy, limit: limit, offset: offset).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Fetches lists of series.
     - GET /v1/public/series
     - Fetches lists of comic series with optional filters. See notes on individual parameters below.
     - API Key:
       - type: apiKey apiKey 
       - name: ApiKey
     - parameter title: (query) Return only series matching the specified title. (optional)
     - parameter titleStartsWith: (query) Return series with titles that begin with the specified string (e.g. Sp). (optional)
     - parameter startYear: (query) Return only series matching the specified start year. (optional)
     - parameter modifiedSince: (query) Return only series which have been modified since the specified date. (optional)
     - parameter comics: (query) Return only series which contain the specified comics (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only series which contain the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only series which have comics that take place during the specified events (accepts a comma-separated list of ids). (optional)
     - parameter creators: (query) Return only series which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     - parameter characters: (query) Return only series which feature the specified characters (accepts a comma-separated list of ids). (optional)
     - parameter seriesType: (query) Filter the series by publication frequency type. (optional)
     - parameter contains: (query) Return only series containing one or more comics with the specified format. (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - returns: RequestBuilder<SeriesDataWrapper> 
     */
    open class func getSeriesCollectionWithRequestBuilder(title: String? = nil, titleStartsWith: String? = nil, startYear: Int? = nil, modifiedSince: Date? = nil, comics: [Int]? = nil, stories: [Int]? = nil, events: [Int]? = nil, creators: [Int]? = nil, characters: [Int]? = nil, seriesType: String? = nil, contains: [String]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<SeriesDataWrapper> {
        let localVariablePath = "/v1/public/series"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "title": title?.encodeToJSON(),
            "titleStartsWith": titleStartsWith?.encodeToJSON(),
            "startYear": startYear?.encodeToJSON(),
            "modifiedSince": modifiedSince?.encodeToJSON(),
            "comics": comics?.encodeToJSON(),
            "stories": stories?.encodeToJSON(),
            "events": events?.encodeToJSON(),
            "creators": creators?.encodeToJSON(),
            "characters": characters?.encodeToJSON(),
            "seriesType": seriesType?.encodeToJSON(),
            "contains": contains?.encodeToJSON(),
            "orderBy": orderBy?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SeriesDataWrapper>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Fetches lists of creators filtered by a series id.
     
     - parameter seriesId: (path) The series ID. 
     - parameter firstName: (query) Filter by creator first name (e.g. brian). (optional)
     - parameter middleName: (query) Filter by creator middle name (e.g. Michael). (optional)
     - parameter lastName: (query) Filter by creator last name (e.g. Bendis). (optional)
     - parameter suffix: (query) Filter by suffix or honorific (e.g. Jr., Sr.). (optional)
     - parameter nameStartsWith: (query) Filter by creator names that match critera (e.g. B, St L). (optional)
     - parameter firstNameStartsWith: (query) Filter by creator first names that match critera (e.g. B, St L). (optional)
     - parameter middleNameStartsWith: (query) Filter by creator middle names that match critera (e.g. Mi). (optional)
     - parameter lastNameStartsWith: (query) Filter by creator last names that match critera (e.g. Ben). (optional)
     - parameter modifiedSince: (query) Return only creators which have been modified since the specified date. (optional)
     - parameter comics: (query) Return only creators who worked on in the specified comics (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only creators who worked on comics that took place in the specified events (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only creators who worked on the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: CreatorDataWrapper
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func getSeriesCreatorCollection(seriesId: Int, firstName: String? = nil, middleName: String? = nil, lastName: String? = nil, suffix: String? = nil, nameStartsWith: String? = nil, firstNameStartsWith: String? = nil, middleNameStartsWith: String? = nil, lastNameStartsWith: String? = nil, modifiedSince: Date? = nil, comics: [Int]? = nil, events: [Int]? = nil, stories: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> CreatorDataWrapper {
        return try await withCheckedThrowingContinuation { continuation in
            getSeriesCreatorCollectionWithRequestBuilder(seriesId: seriesId, firstName: firstName, middleName: middleName, lastName: lastName, suffix: suffix, nameStartsWith: nameStartsWith, firstNameStartsWith: firstNameStartsWith, middleNameStartsWith: middleNameStartsWith, lastNameStartsWith: lastNameStartsWith, modifiedSince: modifiedSince, comics: comics, events: events, stories: stories, orderBy: orderBy, limit: limit, offset: offset).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Fetches lists of creators filtered by a series id.
     - GET /v1/public/series/{seriesId}/creators
     - Fetches lists of comic creators whose work appears in a specific series, with optional filters. See notes on individual parameters below.
     - API Key:
       - type: apiKey apiKey 
       - name: ApiKey
     - parameter seriesId: (path) The series ID. 
     - parameter firstName: (query) Filter by creator first name (e.g. brian). (optional)
     - parameter middleName: (query) Filter by creator middle name (e.g. Michael). (optional)
     - parameter lastName: (query) Filter by creator last name (e.g. Bendis). (optional)
     - parameter suffix: (query) Filter by suffix or honorific (e.g. Jr., Sr.). (optional)
     - parameter nameStartsWith: (query) Filter by creator names that match critera (e.g. B, St L). (optional)
     - parameter firstNameStartsWith: (query) Filter by creator first names that match critera (e.g. B, St L). (optional)
     - parameter middleNameStartsWith: (query) Filter by creator middle names that match critera (e.g. Mi). (optional)
     - parameter lastNameStartsWith: (query) Filter by creator last names that match critera (e.g. Ben). (optional)
     - parameter modifiedSince: (query) Return only creators which have been modified since the specified date. (optional)
     - parameter comics: (query) Return only creators who worked on in the specified comics (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only creators who worked on comics that took place in the specified events (accepts a comma-separated list of ids). (optional)
     - parameter stories: (query) Return only creators who worked on the specified stories (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - returns: RequestBuilder<CreatorDataWrapper> 
     */
    open class func getSeriesCreatorCollectionWithRequestBuilder(seriesId: Int, firstName: String? = nil, middleName: String? = nil, lastName: String? = nil, suffix: String? = nil, nameStartsWith: String? = nil, firstNameStartsWith: String? = nil, middleNameStartsWith: String? = nil, lastNameStartsWith: String? = nil, modifiedSince: Date? = nil, comics: [Int]? = nil, events: [Int]? = nil, stories: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<CreatorDataWrapper> {
        var localVariablePath = "/v1/public/series/{seriesId}/creators"
        let seriesIdPreEscape = "\(APIHelper.mapValueToPathItem(seriesId))"
        let seriesIdPostEscape = seriesIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{seriesId}", with: seriesIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "firstName": firstName?.encodeToJSON(),
            "middleName": middleName?.encodeToJSON(),
            "lastName": lastName?.encodeToJSON(),
            "suffix": suffix?.encodeToJSON(),
            "nameStartsWith": nameStartsWith?.encodeToJSON(),
            "firstNameStartsWith": firstNameStartsWith?.encodeToJSON(),
            "middleNameStartsWith": middleNameStartsWith?.encodeToJSON(),
            "lastNameStartsWith": lastNameStartsWith?.encodeToJSON(),
            "modifiedSince": modifiedSince?.encodeToJSON(),
            "comics": comics?.encodeToJSON(),
            "events": events?.encodeToJSON(),
            "stories": stories?.encodeToJSON(),
            "orderBy": orderBy?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreatorDataWrapper>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Fetches a single comic series by id.
     
     - parameter seriesId: (path) Filter by series title. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: SeriesDataWrapper
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func getSeriesIndividual(seriesId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> SeriesDataWrapper {
        return try await withCheckedThrowingContinuation { continuation in
            getSeriesIndividualWithRequestBuilder(seriesId: seriesId).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Fetches a single comic series by id.
     - GET /v1/public/series/{seriesId}
     - This method fetches a single comic series resource.  It is the canonical URI for any comic series resource provided by the API.
     - API Key:
       - type: apiKey apiKey 
       - name: ApiKey
     - parameter seriesId: (path) Filter by series title. 
     - returns: RequestBuilder<SeriesDataWrapper> 
     */
    open class func getSeriesIndividualWithRequestBuilder(seriesId: Int) -> RequestBuilder<SeriesDataWrapper> {
        var localVariablePath = "/v1/public/series/{seriesId}"
        let seriesIdPreEscape = "\(APIHelper.mapValueToPathItem(seriesId))"
        let seriesIdPostEscape = seriesIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{seriesId}", with: seriesIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SeriesDataWrapper>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Fetches lists of stories filtered by a series id.
     
     - parameter seriesId: (path) The series ID. 
     - parameter modifiedSince: (query) Return only stories which have been modified since the specified date. (optional)
     - parameter comics: (query) Return only stories contained in the specified (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only stories which take place during the specified events (accepts a comma-separated list of ids). (optional)
     - parameter creators: (query) Return only stories which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     - parameter characters: (query) Return only stories which feature the specified characters (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: StoryDataWrapper
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func getSeriesStoryCollection(seriesId: Int, modifiedSince: Date? = nil, comics: [Int]? = nil, events: [Int]? = nil, creators: [Int]? = nil, characters: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> StoryDataWrapper {
        return try await withCheckedThrowingContinuation { continuation in
            getSeriesStoryCollectionWithRequestBuilder(seriesId: seriesId, modifiedSince: modifiedSince, comics: comics, events: events, creators: creators, characters: characters, orderBy: orderBy, limit: limit, offset: offset).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Fetches lists of stories filtered by a series id.
     - GET /v1/public/series/{seriesId}/stories
     - Fetches lists of comic stories from a specific series with optional filters. See notes on individual parameters below.
     - API Key:
       - type: apiKey apiKey 
       - name: ApiKey
     - parameter seriesId: (path) The series ID. 
     - parameter modifiedSince: (query) Return only stories which have been modified since the specified date. (optional)
     - parameter comics: (query) Return only stories contained in the specified (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only stories which take place during the specified events (accepts a comma-separated list of ids). (optional)
     - parameter creators: (query) Return only stories which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     - parameter characters: (query) Return only stories which feature the specified characters (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - returns: RequestBuilder<StoryDataWrapper> 
     */
    open class func getSeriesStoryCollectionWithRequestBuilder(seriesId: Int, modifiedSince: Date? = nil, comics: [Int]? = nil, events: [Int]? = nil, creators: [Int]? = nil, characters: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<StoryDataWrapper> {
        var localVariablePath = "/v1/public/series/{seriesId}/stories"
        let seriesIdPreEscape = "\(APIHelper.mapValueToPathItem(seriesId))"
        let seriesIdPostEscape = seriesIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{seriesId}", with: seriesIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "modifiedSince": modifiedSince?.encodeToJSON(),
            "comics": comics?.encodeToJSON(),
            "events": events?.encodeToJSON(),
            "creators": creators?.encodeToJSON(),
            "characters": characters?.encodeToJSON(),
            "orderBy": orderBy?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<StoryDataWrapper>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Fetches lists of characters filtered by a story id.
     
     - parameter storyId: (path) The story ID. 
     - parameter name: (query) Return only characters matching the specified full character name (e.g. Spider-Man). (optional)
     - parameter nameStartsWith: (query) Return characters with names that begin with the specified string (e.g. Sp). (optional)
     - parameter modifiedSince: (query) Return only characters which have been modified since the specified date. (optional)
     - parameter comics: (query) Return only characters which appear in the specified comics (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only characters which appear the specified series (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only characters which appear comics that took place in the specified events (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: CharacterDataWrapper
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func getStoriesCreatorCollection(storyId: Int, name: String? = nil, nameStartsWith: String? = nil, modifiedSince: Date? = nil, comics: [Int]? = nil, series: [Int]? = nil, events: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> CharacterDataWrapper {
        return try await withCheckedThrowingContinuation { continuation in
            getStoriesCreatorCollectionWithRequestBuilder(storyId: storyId, name: name, nameStartsWith: nameStartsWith, modifiedSince: modifiedSince, comics: comics, series: series, events: events, orderBy: orderBy, limit: limit, offset: offset).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Fetches lists of characters filtered by a story id.
     - GET /v1/public/stories/{storyId}/characters
     - Fetches lists of comic characters appearing in a single story, with optional filters. See notes on individual parameters below.
     - API Key:
       - type: apiKey apiKey 
       - name: ApiKey
     - parameter storyId: (path) The story ID. 
     - parameter name: (query) Return only characters matching the specified full character name (e.g. Spider-Man). (optional)
     - parameter nameStartsWith: (query) Return characters with names that begin with the specified string (e.g. Sp). (optional)
     - parameter modifiedSince: (query) Return only characters which have been modified since the specified date. (optional)
     - parameter comics: (query) Return only characters which appear in the specified comics (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only characters which appear the specified series (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only characters which appear comics that took place in the specified events (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - returns: RequestBuilder<CharacterDataWrapper> 
     */
    open class func getStoriesCreatorCollectionWithRequestBuilder(storyId: Int, name: String? = nil, nameStartsWith: String? = nil, modifiedSince: Date? = nil, comics: [Int]? = nil, series: [Int]? = nil, events: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<CharacterDataWrapper> {
        var localVariablePath = "/v1/public/stories/{storyId}/characters"
        let storyIdPreEscape = "\(APIHelper.mapValueToPathItem(storyId))"
        let storyIdPostEscape = storyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{storyId}", with: storyIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "name": name?.encodeToJSON(),
            "nameStartsWith": nameStartsWith?.encodeToJSON(),
            "modifiedSince": modifiedSince?.encodeToJSON(),
            "comics": comics?.encodeToJSON(),
            "series": series?.encodeToJSON(),
            "events": events?.encodeToJSON(),
            "orderBy": orderBy?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CharacterDataWrapper>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Fetches lists of stories.
     
     - parameter modifiedSince: (query) Return only stories which have been modified since the specified date. (optional)
     - parameter comics: (query) Return only stories contained in the specified (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only stories contained the specified series (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only stories which take place during the specified events (accepts a comma-separated list of ids). (optional)
     - parameter creators: (query) Return only stories which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     - parameter characters: (query) Return only stories which feature the specified characters (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: StoryDataWrapper
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func getStoryCollection(modifiedSince: Date? = nil, comics: [Int]? = nil, series: [Int]? = nil, events: [Int]? = nil, creators: [Int]? = nil, characters: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> StoryDataWrapper {
        return try await withCheckedThrowingContinuation { continuation in
            getStoryCollectionWithRequestBuilder(modifiedSince: modifiedSince, comics: comics, series: series, events: events, creators: creators, characters: characters, orderBy: orderBy, limit: limit, offset: offset).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Fetches lists of stories.
     - GET /v1/public/stories
     - Fetches lists of comic stories with optional filters. See notes on individual parameters below.
     - API Key:
       - type: apiKey apiKey 
       - name: ApiKey
     - parameter modifiedSince: (query) Return only stories which have been modified since the specified date. (optional)
     - parameter comics: (query) Return only stories contained in the specified (accepts a comma-separated list of ids). (optional)
     - parameter series: (query) Return only stories contained the specified series (accepts a comma-separated list of ids). (optional)
     - parameter events: (query) Return only stories which take place during the specified events (accepts a comma-separated list of ids). (optional)
     - parameter creators: (query) Return only stories which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     - parameter characters: (query) Return only stories which feature the specified characters (accepts a comma-separated list of ids). (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - returns: RequestBuilder<StoryDataWrapper> 
     */
    open class func getStoryCollectionWithRequestBuilder(modifiedSince: Date? = nil, comics: [Int]? = nil, series: [Int]? = nil, events: [Int]? = nil, creators: [Int]? = nil, characters: [Int]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<StoryDataWrapper> {
        let localVariablePath = "/v1/public/stories"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "modifiedSince": modifiedSince?.encodeToJSON(),
            "comics": comics?.encodeToJSON(),
            "series": series?.encodeToJSON(),
            "events": events?.encodeToJSON(),
            "creators": creators?.encodeToJSON(),
            "characters": characters?.encodeToJSON(),
            "orderBy": orderBy?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<StoryDataWrapper>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Fetches a single comic story by id.
     
     - parameter storyId: (path) Filter by story id. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: StoryDataWrapper
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func getStoryIndividual(storyId: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> StoryDataWrapper {
        return try await withCheckedThrowingContinuation { continuation in
            getStoryIndividualWithRequestBuilder(storyId: storyId).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Fetches a single comic story by id.
     - GET /v1/public/stories/{storyId}
     - This method fetches a single comic story resource.  It is the canonical URI for any comic story resource provided by the API.
     - parameter storyId: (path) Filter by story id. 
     - returns: RequestBuilder<StoryDataWrapper> 
     */
    open class func getStoryIndividualWithRequestBuilder(storyId: Int) -> RequestBuilder<StoryDataWrapper> {
        var localVariablePath = "/v1/public/stories/{storyId}"
        let storyIdPreEscape = "\(APIHelper.mapValueToPathItem(storyId))"
        let storyIdPostEscape = storyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{storyId}", with: storyIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<StoryDataWrapper>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Fetches lists of series filtered by a story id.
     
     - parameter storyId: (path) The story ID. 
     - parameter events: (query) Return only series which have comics that take place during the specified events (accepts a comma-separated list of ids). (optional)
     - parameter title: (query) Filter by series title. (optional)
     - parameter titleStartsWith: (query) Return series with titles that begin with the specified string (e.g. Sp). (optional)
     - parameter startYear: (query) Return only series matching the specified start year. (optional)
     - parameter modifiedSince: (query) Return only series which have been modified since the specified date. (optional)
     - parameter comics: (query) Return only series which contain the specified comics (accepts a comma-separated list of ids). (optional)
     - parameter creators: (query) Return only series which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     - parameter characters: (query) Return only series which feature the specified characters (accepts a comma-separated list of ids). (optional)
     - parameter seriesType: (query) Filter the series by publication frequency type. (optional)
     - parameter contains: (query) Return only series containing one or more comics with the specified format. (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - returns: SeriesDataWrapper
     */
    @available(macOS 12.0, iOS 15.0, watchOS 8.0, tvOS 15.0, *)
    open class func getStorySeriesCollection(storyId: Int, events: [Int]? = nil, title: String? = nil, titleStartsWith: String? = nil, startYear: Int? = nil, modifiedSince: Date? = nil, comics: [Int]? = nil, creators: [Int]? = nil, characters: [Int]? = nil, seriesType: String? = nil, contains: [String]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue) async throws -> SeriesDataWrapper {
        return try await withCheckedThrowingContinuation { continuation in
            getStorySeriesCollectionWithRequestBuilder(storyId: storyId, events: events, title: title, titleStartsWith: titleStartsWith, startYear: startYear, modifiedSince: modifiedSince, comics: comics, creators: creators, characters: characters, seriesType: seriesType, contains: contains, orderBy: orderBy, limit: limit, offset: offset).execute(apiResponseQueue) { result in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body!)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }

    /**
     Fetches lists of series filtered by a story id.
     - GET /v1/public/stories/{storyId}/series
     - Fetches lists of comic series in which the specified story takes place. See notes on individual parameters below.
     - API Key:
       - type: apiKey apiKey 
       - name: ApiKey
     - parameter storyId: (path) The story ID. 
     - parameter events: (query) Return only series which have comics that take place during the specified events (accepts a comma-separated list of ids). (optional)
     - parameter title: (query) Filter by series title. (optional)
     - parameter titleStartsWith: (query) Return series with titles that begin with the specified string (e.g. Sp). (optional)
     - parameter startYear: (query) Return only series matching the specified start year. (optional)
     - parameter modifiedSince: (query) Return only series which have been modified since the specified date. (optional)
     - parameter comics: (query) Return only series which contain the specified comics (accepts a comma-separated list of ids). (optional)
     - parameter creators: (query) Return only series which feature work by the specified creators (accepts a comma-separated list of ids). (optional)
     - parameter characters: (query) Return only series which feature the specified characters (accepts a comma-separated list of ids). (optional)
     - parameter seriesType: (query) Filter the series by publication frequency type. (optional)
     - parameter contains: (query) Return only series containing one or more comics with the specified format. (optional)
     - parameter orderBy: (query) Order the result set by a field or fields. Add a \&quot;-\&quot; to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (optional)
     - parameter limit: (query) Limit the result set to the specified number of resources. (optional)
     - parameter offset: (query) Skip the specified number of resources in the result set. (optional)
     - returns: RequestBuilder<SeriesDataWrapper> 
     */
    open class func getStorySeriesCollectionWithRequestBuilder(storyId: Int, events: [Int]? = nil, title: String? = nil, titleStartsWith: String? = nil, startYear: Int? = nil, modifiedSince: Date? = nil, comics: [Int]? = nil, creators: [Int]? = nil, characters: [Int]? = nil, seriesType: String? = nil, contains: [String]? = nil, orderBy: [String]? = nil, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<SeriesDataWrapper> {
        var localVariablePath = "/v1/public/stories/{storyId}/series"
        let storyIdPreEscape = "\(APIHelper.mapValueToPathItem(storyId))"
        let storyIdPostEscape = storyIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{storyId}", with: storyIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "events": events?.encodeToJSON(),
            "title": title?.encodeToJSON(),
            "titleStartsWith": titleStartsWith?.encodeToJSON(),
            "startYear": startYear?.encodeToJSON(),
            "modifiedSince": modifiedSince?.encodeToJSON(),
            "comics": comics?.encodeToJSON(),
            "creators": creators?.encodeToJSON(),
            "characters": characters?.encodeToJSON(),
            "seriesType": seriesType?.encodeToJSON(),
            "contains": contains?.encodeToJSON(),
            "orderBy": orderBy?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SeriesDataWrapper>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
