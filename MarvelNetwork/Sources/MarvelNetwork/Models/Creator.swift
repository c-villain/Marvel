//
// Creator.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Creator: Codable, Hashable {

    /** The unique ID of the creator resource. */
    public var id: Int?
    /** The first name of the creator. */
    public var firstName: String?
    /** The middle name of the creator. */
    public var middleName: String?
    /** The last name of the creator. */
    public var lastName: String?
    /** The suffix or honorific for the creator. */
    public var suffix: String?
    /** The full name of the creator (a space-separated concatenation of the above four fields). */
    public var fullName: String?
    /** The date the resource was most recently modified. */
    public var modified: Date?
    /** The canonical URL identifier for this resource. */
    public var resourceURI: String?
    /** A set of public web site URLs for the resource. */
    public var urls: [Url]?
    public var thumbnail: Image?
    public var series: SeriesList?
    public var stories: StoryList?
    public var comics: ComicList?
    public var events: EventList?

    public init(id: Int? = nil, firstName: String? = nil, middleName: String? = nil, lastName: String? = nil, suffix: String? = nil, fullName: String? = nil, modified: Date? = nil, resourceURI: String? = nil, urls: [Url]? = nil, thumbnail: Image? = nil, series: SeriesList? = nil, stories: StoryList? = nil, comics: ComicList? = nil, events: EventList? = nil) {
        self.id = id
        self.firstName = firstName
        self.middleName = middleName
        self.lastName = lastName
        self.suffix = suffix
        self.fullName = fullName
        self.modified = modified
        self.resourceURI = resourceURI
        self.urls = urls
        self.thumbnail = thumbnail
        self.series = series
        self.stories = stories
        self.comics = comics
        self.events = events
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case firstName
        case middleName
        case lastName
        case suffix
        case fullName
        case modified
        case resourceURI
        case urls
        case thumbnail
        case series
        case stories
        case comics
        case events
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(firstName, forKey: .firstName)
        try container.encodeIfPresent(middleName, forKey: .middleName)
        try container.encodeIfPresent(lastName, forKey: .lastName)
        try container.encodeIfPresent(suffix, forKey: .suffix)
        try container.encodeIfPresent(fullName, forKey: .fullName)
        try container.encodeIfPresent(modified, forKey: .modified)
        try container.encodeIfPresent(resourceURI, forKey: .resourceURI)
        try container.encodeIfPresent(urls, forKey: .urls)
        try container.encodeIfPresent(thumbnail, forKey: .thumbnail)
        try container.encodeIfPresent(series, forKey: .series)
        try container.encodeIfPresent(stories, forKey: .stories)
        try container.encodeIfPresent(comics, forKey: .comics)
        try container.encodeIfPresent(events, forKey: .events)
    }
}

