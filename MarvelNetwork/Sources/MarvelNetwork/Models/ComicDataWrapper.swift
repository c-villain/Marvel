//
// ComicDataWrapper.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ComicDataWrapper: Codable {

    /** The HTTP status code of the returned result. */
    public var code: Int?
    /** A string description of the call status. */
    public var status: String?
    /** The copyright notice for the returned result. */
    public var copyright: String?
    /** The attribution notice for this result.  Please display either this notice or the contents of the attributionHTML field on all screens which contain data from the Marvel Comics API. */
    public var attributionText: String?
    /** An HTML representation of the attribution notice for this result.  Please display either this notice or the contents of the attributionText field on all screens which contain data from the Marvel Comics API. */
    public var attributionHTML: String?
    public var data: ComicDataContainer?
    /** A digest value of the content returned by the call. */
    public var etag: String?

    public init(code: Int? = nil, status: String? = nil, copyright: String? = nil, attributionText: String? = nil, attributionHTML: String? = nil, data: ComicDataContainer? = nil, etag: String? = nil) {
        self.code = code
        self.status = status
        self.copyright = copyright
        self.attributionText = attributionText
        self.attributionHTML = attributionHTML
        self.data = data
        self.etag = etag
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case code
        case status
        case copyright
        case attributionText
        case attributionHTML
        case data
        case etag
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(code, forKey: .code)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(copyright, forKey: .copyright)
        try container.encodeIfPresent(attributionText, forKey: .attributionText)
        try container.encodeIfPresent(attributionHTML, forKey: .attributionHTML)
        try container.encodeIfPresent(data, forKey: .data)
        try container.encodeIfPresent(etag, forKey: .etag)
    }
}

